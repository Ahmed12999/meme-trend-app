import streamlit as st
import requests
import pandas as pd

# RSI ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗрж╢ржи ржлрж╛ржВрж╢ржи
def calculate_rsi(prices, period=14):
    delta = prices.diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# AI ржбрж┐рж╕рж┐рж╢ржи ржлрж╛ржВрж╢ржи
def ai_decision(rsi, price_change, volume):
    if rsi > 70 and price_change < 0:
        return "ЁЯФ┤ ржПржЦржи ржмрж┐ржХрзНрж░рж┐ ржХрж░рзБржи (SELL) - ржорж╛рж░рзНржХрзЗржЯ ржбрж╛ржЙржи ржЯрзНрж░рзЗржирзНржбрзЗ ржПржмржВ Overbought ржЕржмрж╕рзНржерж╛ред"
    elif rsi < 30 and price_change > 0:
        return "ЁЯЯв ржПржЦржи ржХрж┐ржирзБржи (BUY) - ржжрж╛ржо ржмрж╛ржбрж╝ржЫрзЗ ржПржмржВ Oversold, ржнрж╛рж▓рзЛ рж╕рзБржпрзЛржЧред"
    elif 30 <= rsi <= 70 and abs(price_change) < 1:
        return "ЁЯЯб ржПржЦржи HOLD ржХрж░рж╛ ржирж┐рж░рж╛ржкржж - ржорж╛рж░рзНржХрзЗржЯ рж╕рзНржерж┐рж░ ржПржмржВ ржирж┐рж░ржкрзЗржХрзНрж╖ RSIред"
    else:
        return "тЪая╕П ржорж╛рж░рзНржХрзЗржЯ ржЕржирж┐рж╢рзНржЪрж┐ржд, рж╕рждрж░рзНржХ ржерж╛ржХрзБржиред RSI: {:.2f}".format(rsi)

# UI рж╢рзБрж░рзБ
st.set_page_config(page_title="ржорж┐ржо ржХржпрж╝рзЗржи ржмрж┐рж╢рзНрж▓рзЗрж╖ржХ", page_icon="ЁЯУИ")
st.title("ЁЯкЩ ржорж┐ржо ржХржпрж╝рзЗржи ржорж╛рж░рзНржХрзЗржЯ ржмрж┐рж╢рзНрж▓рзЗрж╖ржХ (AI BUY / SELL + Pump.fun + CoinGecko)")

option = st.radio(
    "ЁЯФН ржХрзЛржиржнрж╛ржмрзЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рждрзЗ ржЪрж╛ржи?",
    ("ржирж╛ржо ржжрж┐рзЯрзЗ (Token Name)", "ржЕрзНржпрж╛ржбрзНрж░рзЗрж╕ ржжрж┐рзЯрзЗ (Token Address)", "CoinGecko ржерзЗржХрзЗ")
)

# ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржлрж╛ржВрж╢ржи
def analyze_coin(name, symbol, price, price_change, volume, chain=None, mcap=None):
    history = [price * (1 + (price_change / 100) * i / 10) for i in range(30)]
    price_series = pd.Series(history)
    rsi_value = calculate_rsi(price_series).iloc[-1]
    signal = ai_decision(rsi_value, price_change, volume)

    st.success(f"тЬЕ **{name} ({symbol})** ржПрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг")
    st.markdown(f"""
    - ЁЯМР **ржЪрзЗржЗржи:** {chain or 'N/A'}  
    - ЁЯТ╡ **ржжрж╛ржо:** ${price:.8f}  
    - ЁЯУК **рзз ржШржгрзНржЯрж╛рзЯ ржкрж░рж┐ржмрж░рзНрждржи:** {price_change:.2f}%  
    - ЁЯУж **рзирзк ржШржгрзНржЯрж╛рж░ ржнрж▓рж┐ржЙржо:** ${volume:,}  
    - ЁЯзв **ржорж╛рж░рзНржХрзЗржЯ ржХрзНржпрж╛ржк (FDV):** {mcap or 'N/A'}  
    - ЁЯУИ **RSI:** {rsi_value:.2f}  
    - ЁЯдЦ **AI ржбрж┐рж╕рж┐рж╢ржи:** {signal}
    """)

# Option 1: ржирж╛ржо ржжрж┐рзЯрзЗ (DexScreener)
if option == "ржирж╛ржо ржжрж┐рзЯрзЗ (Token Name)":
    token_name = st.text_input("тЬПя╕П ржорж┐ржо ржХржпрж╝рзЗржирзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржи (ржпрзЗржоржи: pepe, bonk, doge)")

    if st.button("ЁЯУК ржЯрзНрж░рзЗржирзНржб ржжрзЗржЦрзБржи"):
        if not token_name:
            st.warning("тЪая╕П ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржЯрзЛржХрзЗржирзЗрж░ ржирж╛ржо ржжрж┐ржи!")
        else:
            url = f"https://api.dexscreener.com/latest/dex/search/?q={token_name.lower()}"
            try:
                response = requests.get(url)
                data = response.json()

                if 'pairs' not in data or len(data['pairs']) == 0:
                    st.error(f"'{token_name}' ржЯрзЛржХрзЗржи ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ ЁЯШУ")
                else:
                    pair = data['pairs'][0]
                    name = pair['baseToken']['name']
                    symbol = pair['baseToken']['symbol']
                    price = float(pair['priceUsd'])
                    chain = pair['chainId']
                    mcap = pair.get('fdv', 'N/A')
                    volume = pair['volume']['h24']
                    price_change = float(pair['priceChange']['h1'])

                    analyze_coin(name, symbol, price, price_change, volume, chain, mcap)
            except Exception as e:
                st.error(f"тЭМ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")

# Option 2: Address ржжрж┐рзЯрзЗ (Pump.fun)
elif option == "ржЕрзНржпрж╛ржбрзНрж░рзЗрж╕ ржжрж┐рзЯрзЗ (Token Address)":
    token_address = st.text_input("ЁЯФЧ ржЯрзЛржХрзЗржирзЗрж░ ржарж┐ржХрж╛ржирж╛ (Solana based)")

    if st.button("ЁЯза ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржжрзЗржЦрзБржи"):
        if not token_address:
            st.warning("тЪая╕П ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржЯрзЛржХрзЗржи ржЕрзНржпрж╛ржбрзНрж░рзЗрж╕ ржжрж┐ржи!")
        else:
            url = f"https://api.dexscreener.com/latest/dex/pairs/solana/{token_address}"
            try:
                response = requests.get(url)
                data = response.json()

                pair = data['pair']
                name = pair['baseToken']['name']
                symbol = pair['baseToken']['symbol']
                price = float(pair['priceUsd'])
                liquidity = pair['liquidity']['usd']
                volume = pair['volume']['h24']
                mcap = pair.get('fdv', 'N/A')
                price_change = float(pair['priceChange']['h1'])

                analyze_coin(name, symbol, price, price_change, volume, "solana", mcap)
            except Exception as e:
                st.error(f"тЭМ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")

# Option 3: CoinGecko ржерзЗржХрзЗ
elif option == "CoinGecko ржерзЗржХрзЗ":
    token_url = st.text_input("ЁЯМР CoinGecko token URL ржжрж┐ржи (ржпрзЗржоржи: https://www.coingecko.com/en/coins/pepe)")

    if st.button("ЁЯУИ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзБржи"):
        if not token_url:
            st.warning("тЪая╕П CoinGecko URL ржжрж┐ржи!")
        else:
            try:
                token = token_url.rstrip("/").split("/")[-1]
                cg_api = f"https://api.coingecko.com/api/v3/coins/{token}?localization=false&tickers=false&market_data=true"
                res = requests.get(cg_api)
                if res.status_code == 200:
                    data = res.json()
                    name = data['name']
                    symbol = data['symbol'].upper()
                    price = data['market_data']['current_price']['usd']
                    volume = data['market_data']['total_volume']['usd']
                    price_change = data['market_data']['price_change_percentage_1h_in_currency']['usd']
                    mcap = data['market_data']['fully_diluted_valuation']['usd']

                    analyze_coin(name, symbol, price, price_change, volume, "CoinGecko", mcap)
                else:
                    st.error("тЪая╕П CoinGecko ржерзЗржХрзЗ рждржерзНржп ржЖржирждрзЗ ржмрзНржпрж░рзНрже")
            except Exception as e:
                st.error(f"тЭМ CoinGecko ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
