import streamlit as st
import requests
import pandas as pd
import numpy as np

# RSI ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗрж╢ржи ржлрж╛ржВрж╢ржи
def calculate_rsi(prices, period=14):
    delta = prices.diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# EMA ржлрж╛ржВрж╢ржи
def calculate_ema(prices, period=14):
    return prices.ewm(span=period, adjust=False).mean()

# MACD ржлрж╛ржВрж╢ржи
def calculate_macd(prices):
    ema12 = prices.ewm(span=12, adjust=False).mean()
    ema26 = prices.ewm(span=26, adjust=False).mean()
    macd = ema12 - ema26
    signal = macd.ewm(span=9, adjust=False).mean()
    return macd, signal

# AI ржбрж┐рж╕рж┐рж╢ржи ржлрж╛ржВрж╢ржи
def ai_decision(rsi, macd, signal_line, price_change, volume):
    trend_signal = ""
    if macd.iloc[-1] > signal_line.iloc[-1]:
        trend_signal = "ЁЯУИ MACD ржЗржЩрзНржЧрж┐ржд ржХрж░ржЫрзЗ ржжрж╛ржо ржмрж╛ржбрж╝рждрзЗ ржкрж╛рж░рзЗред"
    else:
        trend_signal = "ЁЯУЙ MACD ржЗржЩрзНржЧрж┐ржд ржХрж░ржЫрзЗ ржжрж╛ржо ржХржорждрзЗ ржкрж╛рж░рзЗред"

    if rsi > 70 and price_change < 0:
        return f"ЁЯФ┤ ржПржЦржи ржмрж┐ржХрзНрж░рж┐ ржХрж░рзБржи (SELL) - Overbought ржПржмржВ ржжрж╛ржо ржХржоржЫрзЗред\n{trend_signal}"
    elif rsi < 30 and price_change > 0:
        return f"ЁЯЯв ржПржЦржи ржХрж┐ржирзБржи (BUY) - Oversold ржПржмржВ ржжрж╛ржо ржмрж╛ржбрж╝ржЫрзЗред\n{trend_signal}"
    elif 30 <= rsi <= 70 and abs(price_change) < 1:
        return f"ЁЯЯб HOLD - ржорж╛рж░рзНржХрзЗржЯ рж╕рзНржерж┐рж░ред\n{trend_signal}"
    else:
        return f"тЪая╕П ржЕржирж┐рж╢рзНржЪрж┐ржд ржЕржмрж╕рзНржерж╛, рж╕рждрж░рзНржХ ржерж╛ржХрзБржиред RSI: {rsi:.2f}\n{trend_signal}"

# CoinGecko рж╕рж╛рж░рзНржЪ ржлрж╛ржВрж╢ржи
def search_coin_gecko(query):
    try:
        search_url = f"https://api.coingecko.com/api/v3/search?query={query}"
        res = requests.get(search_url)
        if res.status_code == 200:
            result = res.json()
            if len(result['coins']) > 0:
                return result['coins'][0]['id']
    except:
        return None

# Coingecko ржерзЗржХрзЗ ржжрж╛ржо ржУ ржбрзЗржЯрж╛ ржЖржирж╛
def analyze_from_coingecko(token):
    try:
        token_id = search_coin_gecko(token)
        if not token_id:
            st.error(f"'{token}' CoinGecko рждрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐")
            return
        cg_api = f"https://api.coingecko.com/api/v3/coins/{token_id}?localization=false&tickers=false&market_data=true"
        res = requests.get(cg_api)
        if res.status_code == 200:
            data = res.json()
            name = data['name']
            symbol = data['symbol'].upper()
            price = data['market_data']['current_price']['usd']
            volume = data['market_data']['total_volume']['usd']
            price_change = data['market_data']['price_change_percentage_1h_in_currency']['usd']

            history = [price * (1 + (price_change / 100) * i / 10) for i in range(30)]
            price_series = pd.Series(history)
            rsi_value = calculate_rsi(price_series).iloc[-1]
            macd, signal_line = calculate_macd(price_series)
            ema_value = calculate_ema(price_series).iloc[-1]

            signal = ai_decision(rsi_value, macd, signal_line, price_change, volume)

            st.success(f"тЬЕ **{name} ({symbol})** ржПрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг (CoinGecko)")
            st.markdown(f"""
            - ЁЯТ╡ **ржжрж╛ржо:** ${price:.8f}   
            - ЁЯУК **рзз ржШржгрзНржЯрж╛рзЯ ржкрж░рж┐ржмрж░рзНрждржи:** {price_change:.2f}%   
            - ЁЯУж **рзирзк ржШржгрзНржЯрж╛рж░ ржнрж▓рж┐ржЙржо:** ${volume:,}   

            ### ЁЯУК ржЯрзЗржХржирж┐ржХрзНржпрж╛рж▓ ржЗржиржбрж┐ржХрзЗржЯрж░:
            - RSI: {rsi_value:.2f}
            - EMA(14): {ema_value:.4f}
            - MACD: {macd.iloc[-1]:.4f}, Signal: {signal_line.iloc[-1]:.4f}

            ### ЁЯдЦ AI ржбрж┐рж╕рж┐рж╢ржи:
            {signal}
            """)
        else:
            st.error("тЪая╕П CoinGecko token ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐")
    except Exception as e:
        st.error(f"тЭМ CoinGecko API рж╕ржорж╕рзНржпрж╛: {e}")

# рж╕рзНржЯрзНрж░рж┐ржорж▓рж┐ржЯ UI
st.set_page_config(page_title="ржорж╛рж░рзНржХрзЗржЯ ржмрж┐рж╢рзНрж▓рзЗрж╖ржХ", page_icon="ЁЯУИ")
st.title("ЁЯкЩ ржЕрж▓ ржЗржи ржУрзЯрж╛ржи ржХрзНрж░рж┐ржкрзНржЯрзЛ ржПржирж╛рж▓рж╛ржЗрж╕рж┐рж╕ (Dex + CoinGecko)")

query = st.text_input("ЁЯФН ржЯрзЛржХрзЗржирзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржи:")

if st.button("ЁЯФО ржмрж┐рж╢рзНрж▓рзЗрж╖ржг рж╢рзБрж░рзБ ржХрж░рзБржи") and query:
    try:
        dex_url = f"https://api.dexscreener.com/latest/dex/search/?q={query.lower()}"
        response = requests.get(dex_url)
        data = response.json()

        if 'pairs' in data and len(data['pairs']) > 0:
            pair = data['pairs'][0]
            name = pair['baseToken']['name']
            symbol = pair['baseToken']['symbol']
            price = float(pair['priceUsd'])
            volume = pair['volume']['h24']
            price_change = float(pair['priceChange']['h1'])

            # рж╣рж┐рж╕рзНржЯрзЛрж░рж┐ рждрзИрж░рж┐
            history = [price * (1 + (price_change / 100) * i / 10) for i in range(30)]
            price_series = pd.Series(history)
            rsi_value = calculate_rsi(price_series).iloc[-1]
            macd, signal_line = calculate_macd(price_series)
            ema_value = calculate_ema(price_series).iloc[-1]

            signal = ai_decision(rsi_value, macd, signal_line, price_change, volume)

            st.success(f"тЬЕ **{name} ({symbol})** ржПрж░ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг (DexScreener)")
            st.markdown(f"""
            - ЁЯТ╡ **ржжрж╛ржо:** ${price:.8f}   
            - ЁЯУК **рзз ржШржгрзНржЯрж╛рзЯ ржкрж░рж┐ржмрж░рзНрждржи:** {price_change:.2f}%   
            - ЁЯУж **рзирзк ржШржгрзНржЯрж╛рж░ ржнрж▓рж┐ржЙржо:** ${volume:,}   

            ### ЁЯУК ржЯрзЗржХржирж┐ржХрзНржпрж╛рж▓ ржЗржиржбрж┐ржХрзЗржЯрж░:
            - RSI: {rsi_value:.2f}
            - EMA(14): {ema_value:.4f}
            - MACD: {macd.iloc[-1]:.4f}, Signal: {signal_line.iloc[-1]:.4f}

            ### ЁЯдЦ AI ржбрж┐рж╕рж┐рж╢ржи:
            {signal}
            """)
        else:
            st.info("ЁЯФБ DexScreener ржП ржлрж▓рж╛ржлрж▓ ржирж╛ ржкрж╛ржУржпрж╝рж╛ржпрж╝ ржПржЦржи CoinGecko ржерзЗржХрзЗ ржЦрзЛржБржЬрж╛ рж╣ржЪрзНржЫрзЗ...")
            analyze_from_coingecko(query)
    except Exception as e:
        st.error(f"тЭМ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {e}")
        
