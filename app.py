import streamlit as st
import requests
import pandas as pd
import numpy as np
import random

from technicals import calculate_rsi, calculate_ema, calculate_macd, calculate_bollinger_bands
from ai_logic import ai_decision, bollinger_breakout_signal

# Streamlit UI ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
st.set_page_config(page_title="AI Crypto Advisor", page_icon="üìà")
st.title("ü™ô ‡¶Æ‡¶ø‡¶Æ + ‡¶Æ‡ßá‡¶á‡¶® ‡¶ï‡¶Ø‡¶º‡ßá‡¶® AI ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶ï")

option = st.radio(
    "üìå ‡¶ï‡ßã‡¶® ‡¶â‡ßé‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®?",
    ("CoinGecko ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®", "DexScreener Address ‡¶¶‡¶ø‡ßü‡ßá")
)

def analyze_coin(name, symbol, price, price_change, volume, chain=None, mcap=None):
    history = [
        price * (1 + (price_change / 100) * i / 10 + random.uniform(-0.005, 0.005))
        for i in range(30)
    ]
    price_series = pd.Series(history)

    # RSI, EMA, MACD ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨
    rsi = calculate_rsi(price_series).iloc[-1]
    ema = calculate_ema(price_series).iloc[-1]
    macd, signal = calculate_macd(price_series)
    macd_val = macd.iloc[-1]
    signal_val = signal.iloc[-1]

    # Bollinger Bands ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨
    upper_band, middle_band, lower_band = calculate_bollinger_bands(price_series)
    upper_band_val = upper_band.iloc[-1]
    lower_band_val = lower_band.iloc[-1]

    # AI ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§ ‡¶ì ‡¶¨‡ßç‡¶∞‡ßá‡¶ï‡¶Ü‡¶â‡¶ü ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤
    decision = ai_decision(rsi, macd, signal, price_change, volume)
    bb_signal = bollinger_breakout_signal(price, upper_band_val, lower_band_val)

    st.success(f"‚úÖ {name} ({symbol}) ‡¶è‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£")
    st.markdown(f"""
- üåê **Chain:** {chain or 'N/A'}
- üí∞ **Price:** ${price:.8f}
- üìä **1h Change:** {price_change:.2f}%
- üì¶ **24h Volume:** ${volume:,}
- üß¢ **Market Cap:** {mcap or 'N/A'}

### üìâ Indicators:
- RSI: {rsi:.2f}
- EMA: {ema:.4f}
- MACD: {macd_val:.4f}, Signal: {signal_val:.4f}

### üìà Bollinger Bands:
- Upper Band: {upper_band_val:.4f}
- Lower Band: {lower_band_val:.4f}

### ü§ñ AI ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§:
{decision}

### üì¢ ‡¶¨‡ßç‡¶∞‡ßá‡¶ï‡¶Ü‡¶â‡¶ü ‡¶∏‡¶ø‡¶ó‡¶®‡ßç‡¶Ø‡¶æ‡¶≤:
{bb_signal}
""")

# Option 1: CoinGecko ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡ßü‡ßá
if option == "CoinGecko ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®":
    user_query = st.text_input("üîé ‡¶ü‡ßã‡¶ï‡ßá‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: pepe, bonk, sol)")

    if user_query:
        try:
            search_api = f"https://api.coingecko.com/api/v3/search?query={user_query}"
            res = requests.get(search_api)
            data = res.json()
            coins = data.get('coins', [])
            if not coins:
                st.warning("üòì ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø")
            else:
                options = {f"{c['name']} ({c['symbol'].upper()})": c['id'] for c in coins[:10]}
                selected = st.selectbox("üìã ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®:", list(options.keys()))

                if selected:
                    token_id = options[selected]
                    cg_url = f"https://api.coingecko.com/api/v3/coins/{token_id}?localization=false&tickers=false&market_data=true"
                    response = requests.get(cg_url)
                    if response.status_code == 200:
                        coin = response.json()
                        name = coin['name']
                        symbol = coin['symbol'].upper()
                        price = coin['market_data']['current_price']['usd']
                        price_change = coin['market_data']['price_change_percentage_1h_in_currency']['usd']
                        volume = coin['market_data']['total_volume']['usd']
                        mcap = coin['market_data']['fully_diluted_valuation']['usd']

                        analyze_coin(name, symbol, price, price_change, volume, "CoinGecko", mcap)
        except Exception as e:
            st.error(f"‚ùå ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")

# Option 2: DexScreener Address ‡¶¶‡¶ø‡ßü‡ßá
elif option == "DexScreener Address ‡¶¶‡¶ø‡ßü‡ßá":
    token_address = st.text_input("üîó ‡¶Ø‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶ö‡ßá‡¶á‡¶®‡ßá‡¶∞ ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏ ‡¶¶‡¶ø‡¶®")

    if st.button("üìä ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®") and token_address:
        try:
            url = f"https://api.dexscreener.com/latest/dex/search/?q={token_address}"
            res = requests.get(url)
            data = res.json()

            if not data or 'pairs' not in data or len(data['pairs']) == 0:
                st.error("‚ö†Ô∏è ‡¶è‡¶á ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏ ‡¶¶‡¶ø‡¶® ‡¶¨‡¶æ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
            else:
                pair = data['pairs'][0]
                name = pair['baseToken']['name']
                symbol = pair['baseToken']['symbol']
                price = float(pair['priceUsd']) if pair['priceUsd'] else 0
                price_change = float(pair['priceChange']['h1']) if pair['priceChange'] and pair['priceChange']['h1'] else 0
                volume = float(pair['volume']['h24']) if pair['volume'] and pair['volume']['h24'] else 0
                mcap = pair.get('fdv', 'N/A')
                chain = pair.get('chainId', 'Unknown')

                analyze_coin(name, symbol, price, price_change, volume, chain, mcap)

        except Exception as e:
            st.error(f"‚ùå ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")
            
