import streamlit as st
import requests
import pandas as pd
import numpy as np
from ta.trend import EMAIndicator, MACD
from ta.momentum import RSIIndicator

# RSI ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶∂‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def calculate_rsi(prices, period=14):
    rsi = RSIIndicator(close=prices, window=period)
    return rsi.rsi()

# EMA ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶∂‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def calculate_ema(prices, period=14):
    ema = EMAIndicator(close=prices, window=period)
    return ema.ema_indicator()

# MACD ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶∂‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def calculate_macd(prices):
    macd = MACD(close=prices)
    return macd.macd(), macd.macd_signal()

# AI ‡¶°‡¶ø‡¶∏‡¶ø‡¶∂‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def ai_decision(rsi, macd, signal_line, price_change, volume):
    trend_signal = ""
    if macd.iloc[-1] > signal_line.iloc[-1]:
        trend_signal = "üìà MACD ‡¶á‡¶ô‡ßç‡¶ó‡¶ø‡¶§ ‡¶ï‡¶∞‡¶õ‡ßá ‡¶¶‡¶æ‡¶Æ ‡¶¨‡¶æ‡¶°‡¶º‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§"
    else:
        trend_signal = "üìâ MACD ‡¶á‡¶ô‡ßç‡¶ó‡¶ø‡¶§ ‡¶ï‡¶∞‡¶õ‡ßá ‡¶¶‡¶æ‡¶Æ ‡¶ï‡¶Æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§"

    if rsi > 70 and price_change < 0:
        return f"üî¥ ‡¶è‡¶ñ‡¶® ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® (SELL) - Overbought ‡¶è‡¶¨‡¶Ç ‡¶¶‡¶æ‡¶Æ ‡¶ï‡¶Æ‡¶õ‡ßá‡•§\n{trend_signal}"
    elif rsi < 30 and price_change > 0:
        return f"üü¢ ‡¶è‡¶ñ‡¶® ‡¶ï‡¶ø‡¶®‡ßÅ‡¶® (BUY) - Oversold ‡¶è‡¶¨‡¶Ç ‡¶¶‡¶æ‡¶Æ ‡¶¨‡¶æ‡¶°‡¶º‡¶õ‡ßá‡•§\n{trend_signal}"
    elif 30 <= rsi <= 70 and abs(price_change) < 1:
        return f"üü° HOLD - ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶∏‡ßç‡¶•‡¶ø‡¶∞‡•§\n{trend_signal}"
    else:
        return f"‚ö†Ô∏è ‡¶Ö‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ, ‡¶∏‡¶§‡¶∞‡ßç‡¶ï ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®‡•§ RSI: {rsi:.2f}\n{trend_signal}"

# UI ‡¶∂‡ßÅ‡¶∞‡ßÅ
st.set_page_config(page_title="‡¶Æ‡¶ø‡¶Æ ‡¶ï‡¶Ø‡¶º‡ßá‡¶® ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶ï", page_icon="üìà")
st.title("ü™ô ‡¶Æ‡¶ø‡¶Æ ‡¶ï‡¶Ø‡¶º‡ßá‡¶® ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶ï (AI BUY / SELL + RSI, MACD, EMA)")

option = st.radio(
    "üîç ‡¶ï‡ßã‡¶®‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®:",
    ("‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡ßü‡ßá (Token Name)", "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá (Token Address)", "CoinGecko ‡¶•‡ßá‡¶ï‡ßá")
)

# -------- Function: ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã --------
def analyze_coin(name, symbol, price, price_change, volume, chain=None, mcap=None):
    history = [price * (1 + (price_change / 100) * i / 10) for i in range(30)]
    price_series = pd.Series(history)
    rsi_value = calculate_rsi(price_series).iloc[-1]
    macd, signal_line = calculate_macd(price_series)
    ema_value = calculate_ema(price_series).iloc[-1]

    signal = ai_decision(rsi_value, macd, signal_line, price_change, volume)

    st.success(f"‚úÖ **{name} ({symbol})** ‡¶è‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£")
    st.markdown(f"""
    - üåê **‡¶ö‡ßá‡¶á‡¶®:** {chain or 'N/A'}  
    - üíµ **‡¶¶‡¶æ‡¶Æ:** ${price:.8f}  
    - üìä **‡ßß ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡ßü ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®:** {price_change:.2f}%  
    - üì¶ **‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡¶∞ ‡¶≠‡¶≤‡¶ø‡¶â‡¶Æ:** ${volume:,}  
    - üß¢ **‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™ (FDV):** {mcap or 'N/A'}  

    ### üß† ‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ:
    - üìà **RSI:** {rsi_value:.2f}  
    - üìä **EMA (14):** {ema_value:.4f}  
    - üìâ **MACD:** {macd.iloc[-1]:.4f}, Signal: {signal_line.iloc[-1]:.4f}  

    ### üßæ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶ï‡¶®‡ßç‡¶°‡¶ø‡¶∂‡¶®:
    - üí∏ **‡¶≠‡¶≤‡¶ø‡¶â‡¶Æ:** ${volume:,}  
    - üí¨ **Sentiment:** ‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶° = {'üìà UP' if price_change > 0 else 'üìâ DOWN'}  

    ### ü§ñ AI ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§:
    {signal}
    """)

# -------- Option 1: Name Based Analysis --------
if option == "‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡ßü‡ßá (Token Name)":
    token_name = st.text_input("‚úèÔ∏è ‡¶Æ‡¶ø‡¶Æ ‡¶ï‡¶Ø‡¶º‡ßá‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: pepe, bonk, doge)")

    if st.button("üìä ‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶° ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®"):
        if not token_name:
            st.warning("‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ü‡ßã‡¶ï‡ßá‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®!")
        else:
            url = f"https://api.dexscreener.com/latest/dex/search/?q={token_name.lower()}"
            try:
                response = requests.get(url)
                data = response.json()

                if 'pairs' not in data or len(data['pairs']) == 0:
                    st.error(f"'{token_name}' ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø üòì")
                else:
                    pair = data['pairs'][0]
                    name = pair['baseToken']['name']
                    symbol = pair['baseToken']['symbol']
                    price = float(pair['priceUsd'])
                    chain = pair['chainId']
                    mcap = pair.get('fdv', 'N/A')
                    volume = pair['volume']['h24']
                    price_change = float(pair['priceChange']['h1'])

                    analyze_coin(name, symbol, price, price_change, volume, chain, mcap)
            except Exception as e:
                st.error(f"‚ùå ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")

# -------- Option 2: Address Based Analysis (Pump.fun etc.) --------
elif option == "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá (Token Address)":
    token_address = st.text_input("üîó ‡¶ü‡ßã‡¶ï‡ßá‡¶®‡ßá‡¶∞ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ (address) ‡¶¶‡¶ø‡¶®")

    if st.button("üß† ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®"):
        if not token_address:
            st.warning("‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏ ‡¶¶‡¶ø‡¶®!")
        else:
            url = f"https://api.dexscreener.com/latest/dex/pairs/solana/{token_address}"
            try:
                response = requests.get(url)
                data = response.json()

                pair = data['pair']
                name = pair['baseToken']['name']
                symbol = pair['baseToken']['symbol']
                price = float(pair['priceUsd'])
                liquidity = pair['liquidity']['usd']
                volume = pair['volume']['h24']
                mcap = pair.get('fdv', 'N/A')
                price_change = float(pair['priceChange']['h1'])

                analyze_coin(name, symbol, price, price_change, volume, "solana", mcap)
            except Exception as e:
                st.error(f"‚ùå ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")

# -------- Option 3: CoinGecko --------
elif option == "CoinGecko ‡¶•‡ßá‡¶ï‡ßá":
    token_url = st.text_input("üîó CoinGecko URL ‡¶¶‡¶ø‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: https://www.coingecko.com/en/coins/pepe)")

    if st.button("üìà ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®") and token_url:
        try:
            token = token_url.rstrip("/").split("/")[-1]
            cg_api = f"https://api.coingecko.com/api/v3/coins/{token}?localization=false&tickers=false&market_data=true"
            res = requests.get(cg_api)
            if res.status_code == 200:
                data = res.json()
                name = data['name']
                symbol = data['symbol'].upper()
                price = data['market_data']['current_price']['usd']
                volume = data['market_data']['total_volume']['usd']
                price_change = data['market_data']['price_change_percentage_1h_in_currency']['usd']

                analyze_coin(name, symbol, price, price_change, volume, "CoinGecko")
            else:
                st.error("‚ö†Ô∏è CoinGecko token ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
        except Exception as e:
            st.error(f"‚ùå CoinGecko API ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
            
