import streamlit as st
import requests
import pandas as pd
import numpy as np

# RSI ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶∂‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def calculate_rsi(prices, period=14):
    delta = prices.diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# EMA ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def calculate_ema(prices, period=14):
    return prices.ewm(span=period, adjust=False).mean()

# MACD ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def calculate_macd(prices):
    ema12 = prices.ewm(span=12, adjust=False).mean()
    ema26 = prices.ewm(span=26, adjust=False).mean()
    macd = ema12 - ema26
    signal = macd.ewm(span=9, adjust=False).mean()
    return macd, signal

# AI ‡¶°‡¶ø‡¶∏‡¶ø‡¶∂‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def ai_decision(rsi, macd, signal_line, price_change, volume):
    trend_signal = ""
    if macd.iloc[-1] > signal_line.iloc[-1]:
        trend_signal = "üìà MACD ‡¶á‡¶ô‡ßç‡¶ó‡¶ø‡¶§ ‡¶ï‡¶∞‡¶õ‡ßá ‡¶¶‡¶æ‡¶Æ ‡¶¨‡¶æ‡¶°‡¶º‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§"
    else:
        trend_signal = "üìâ MACD ‡¶á‡¶ô‡ßç‡¶ó‡¶ø‡¶§ ‡¶ï‡¶∞‡¶õ‡ßá ‡¶¶‡¶æ‡¶Æ ‡¶ï‡¶Æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§"

    if rsi > 70 and price_change < 0:
        return f"üî¥ ‡¶è‡¶ñ‡¶® ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® (SELL) - Overbought ‡¶è‡¶¨‡¶Ç ‡¶¶‡¶æ‡¶Æ ‡¶ï‡¶Æ‡¶õ‡ßá‡•§\n{trend_signal}"
    elif rsi < 30 and price_change > 0:
        return f"üü¢ ‡¶è‡¶ñ‡¶® ‡¶ï‡¶ø‡¶®‡ßÅ‡¶® (BUY) - Oversold ‡¶è‡¶¨‡¶Ç ‡¶¶‡¶æ‡¶Æ ‡¶¨‡¶æ‡¶°‡¶º‡¶õ‡ßá‡•§\n{trend_signal}"
    elif 30 <= rsi <= 70 and abs(price_change) < 1:
        return f"üü° HOLD - ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶∏‡ßç‡¶•‡¶ø‡¶∞‡•§\n{trend_signal}"
    else:
        return f"‚ö†Ô∏è ‡¶Ö‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ, ‡¶∏‡¶§‡¶∞‡ßç‡¶ï ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®‡•§ RSI: {rsi:.2f}\n{trend_signal}"

# UI ‡¶∂‡ßÅ‡¶∞‡ßÅ
st.set_page_config(page_title="‡¶Æ‡¶ø‡¶Æ ‡¶ï‡¶Ø‡¶º‡ßá‡¶® ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶ï", page_icon="üìà")
st.title("ü™ô ‡¶Æ‡¶ø‡¶Æ ‡¶ï‡¶Ø‡¶º‡ßá‡¶® ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶ï (AI BUY / SELL + RSI, MACD, EMA + CoinGecko)")

option = st.radio(
    "üîç ‡¶ï‡ßã‡¶®‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®:",
    ("CoinGecko ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®", "Dexscreener Address ‡¶¶‡¶ø‡ßü‡ßá")
)

# -------- Function: ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã --------
def analyze_coin(name, symbol, price, price_change, volume, chain=None, mcap=None):
    history = [price * (1 + (price_change / 100) * i / 10) for i in range(30)]
    price_series = pd.Series(history)
    rsi_value = calculate_rsi(price_series).iloc[-1]
    macd, signal_line = calculate_macd(price_series)
    ema_value = calculate_ema(price_series).iloc[-1]

    signal = ai_decision(rsi_value, macd, signal_line, price_change, volume)

    st.success(f"‚úÖ **{name} ({symbol})** ‡¶è‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£")
    st.markdown(f"""
    - üåê **‡¶ö‡ßá‡¶á‡¶®:** {chain or 'N/A'}  
    - üíµ **‡¶¶‡¶æ‡¶Æ:** ${price:.8f}  
    - üìä **‡ßß ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡ßü ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®:** {price_change:.2f}%  
    - üì¶ **‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡¶∞ ‡¶≠‡¶≤‡¶ø‡¶â‡¶Æ:** ${volume:,}  
    - üß¢ **‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™ (FDV):** {mcap or 'N/A'}  

    ### üß† ‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ:
    - üìà **RSI:** {rsi_value:.2f}  
    - üìä **EMA (14):** {ema_value:.4f}  
    - üìâ **MACD:** {macd.iloc[-1]:.4f}, Signal: {signal_line.iloc[-1]:.4f}  

    ### üßæ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶ï‡¶®‡ßç‡¶°‡¶ø‡¶∂‡¶®:
    - üí∏ **‡¶≠‡¶≤‡¶ø‡¶â‡¶Æ:** ${volume:,}  
    - üí¨ **Sentiment:** ‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶° = {'üìà UP' if price_change > 0 else 'üìâ DOWN'}  

    ### ü§ñ AI ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§:
    {signal}
    """)

# -------- Option 1: CoinGecko ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü --------
if option == "CoinGecko ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®":
    user_query = st.text_input("üîç ‡¶ü‡ßã‡¶ï‡ßá‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: pi, pepe, bonk)")

    if user_query:
        try:
            search_api = f"https://api.coingecko.com/api/v3/search?query={user_query}"
            res = requests.get(search_api)
            data = res.json()
            coins = data['coins']

            if not coins:
                st.warning("‚ö†Ô∏è ‡¶ï‡ßã‡¶®‡¶ì ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
            else:
                options = {f"{c['name']} ({c['symbol'].upper()})": c['id'] for c in coins[:10]}
                selected = st.selectbox("üìã ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:", list(options.keys()))

                if selected:
                    token_id = options[selected]
                    cg_api = f"https://api.coingecko.com/api/v3/coins/{token_id}?localization=false&tickers=false&market_data=true"
                    res = requests.get(cg_api)
                    if res.status_code == 200:
                        data = res.json()
                        name = data['name']
                        symbol = data['symbol'].upper()
                        price = data['market_data']['current_price']['usd']
                        volume = data['market_data']['total_volume']['usd']
                        price_change = data['market_data']['price_change_percentage_1h_in_currency']['usd']
                        mcap = data['market_data']['fully_diluted_valuation']['usd']

                        analyze_coin(name, symbol, price, price_change, volume, "CoinGecko", mcap)
        except Exception as e:
            st.error(f"‚ùå CoinGecko API ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")

# -------- Option 2: Dexscreener Address ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá --------
elif option == "Dexscreener Address ‡¶¶‡¶ø‡ßü‡ßá":
    token_address = st.text_input("üîó Solana ‡¶ü‡ßã‡¶ï‡ßá‡¶®‡ßá‡¶∞ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ ‡¶¶‡¶ø‡¶®")

    if st.button("üìä ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®") and token_address:
        try:
            url = f"https://api.dexscreener.com/latest/dex/pairs/solana/{token_address}"
            response = requests.get(url)
            data = response.json()

            pair = data['pair']
            name = pair['baseToken']['name']
            symbol = pair['baseToken']['symbol']
            price = float(pair['priceUsd'])
            volume = pair['volume']['h24']
            mcap = pair.get('fdv', 'N/A')
            price_change = float(pair['priceChange']['h1'])

            analyze_coin(name, symbol, price, price_change, volume, "Solana", mcap)
        except Exception as e:
            st.error(f"‚ùå ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {e}")
