import streamlit as st
import requests
import pandas as pd
import numpy as np
from binance.client import Client
import talib

# Binance client setup (no API key needed for public data)
binance_client = Client()

# RSI Calculation
def calculate_rsi(prices, period=14):
    delta = prices.diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# EMA Calculation
def calculate_ema(prices, period=14):
    return prices.ewm(span=period, adjust=False).mean()

# MACD Calculation
def calculate_macd(prices):
    ema12 = prices.ewm(span=12, adjust=False).mean()
    ema26 = prices.ewm(span=26, adjust=False).mean()
    macd = ema12 - ema26
    signal = macd.ewm(span=9, adjust=False).mean()
    return macd, signal

# AI Decision Based on Indicators
def ai_decision(rsi, macd, signal_line, price_change, volume):
    trend_signal = ""
    if macd.iloc[-1] > signal_line.iloc[-1]:
        trend_signal = "ЁЯУИ MACD ржЗржЩрзНржЧрж┐ржд ржХрж░ржЫрзЗ ржжрж╛ржо ржмрж╛ржбрж╝рждрзЗ ржкрж╛рж░рзЗред"
    else:
        trend_signal = "ЁЯУЙ MACD ржЗржЩрзНржЧрж┐ржд ржХрж░ржЫрзЗ ржжрж╛ржо ржХржорждрзЗ ржкрж╛рж░рзЗред"

    if rsi > 70 and price_change < 0:
        return f"ЁЯФ┤ ржПржЦржи ржмрж┐ржХрзНрж░рж┐ ржХрж░рзБржи (SELL) - Overbought ржПржмржВ ржжрж╛ржо ржХржоржЫрзЗред\n{trend_signal}"
    elif rsi < 30 and price_change > 0:
        return f"ЁЯЯв ржПржЦржи ржХрж┐ржирзБржи (BUY) - Oversold ржПржмржВ ржжрж╛ржо ржмрж╛ржбрж╝ржЫрзЗред\n{trend_signal}"
    elif 30 <= rsi <= 70 and abs(price_change) < 1:
        return f"ЁЯЯб HOLD - ржорж╛рж░рзНржХрзЗржЯ рж╕рзНржерж┐рж░ред\n{trend_signal}"
    else:
        return f"тЪая╕П ржЕржирж┐рж╢рзНржЪрж┐ржд ржЕржмрж╕рзНржерж╛, рж╕рждрж░рзНржХ ржерж╛ржХрзБржиред RSI: {rsi:.2f}\n{trend_signal}"

# Binance ржерзЗржХрзЗ ржХрзНржпрж╛ржирзНржбрзЗрж▓ ржбрзЗржЯрж╛ ржЖржирзЛ
def get_binance_klines(symbol="PEPEUSDT", interval="5m", limit=50):
    klines = binance_client.get_klines(symbol=symbol, interval=interval, limit=limit)
    df = pd.DataFrame(klines, columns=[
        "timestamp", "open", "high", "low", "close", "volume", "_1", "_2", "_3", "_4", "_5", "_6"
    ])
    df["open"] = df["open"].astype(float)
    df["high"] = df["high"].astype(float)
    df["low"] = df["low"].astype(float)
    df["close"] = df["close"].astype(float)
    df["volume"] = df["volume"].astype(float)
    return df

# ржХрзНржпрж╛ржирзНржбрзЗрж▓ ржкрзНржпрж╛ржЯрж╛рж░рзНржи рж╢ржирж╛ржХрзНржд ржХрж░рж╛
def detect_patterns(df):
    open_, high, low, close = df["open"], df["high"], df["low"], df["close"]
    df['hammer'] = talib.CDLHAMMER(open_, high, low, close)
    df['doji'] = talib.CDLDOJI(open_, high, low, close)
    df['engulfing'] = talib.CDLENGULFING(open_, high, low, close)
    
    latest = df.iloc[-1]
    signals = []
    if latest['hammer'] != 0:
        signals.append("ЁЯФи **Hammer Detected** - ржорж╛рж░рзНржХрзЗржЯ рж░рж┐ржнрж╛рж░рзНрж╕рж╛рж▓ ржЖржк рж╣рждрзЗ ржкрж╛рж░рзЗ")
    if latest['doji'] != 0:
        signals.append("тЪЦя╕П **Doji Detected** - ржЕржирж┐рж╢рзНржЪрж┐ржд ржорж╛рж░рзНржХрзЗржЯ ржЕржмрж╕рзНржерж╛")
    if latest['engulfing'] > 0:
        signals.append("ЁЯЯв **Bullish Engulfing Detected** - ржжрж╛ржо ржмрж╛ржбрж╝рждрзЗ ржкрж╛рж░рзЗ")
    elif latest['engulfing'] < 0:
        signals.append("ЁЯФ┤ **Bearish Engulfing Detected** - ржжрж╛ржо ржХржорждрзЗ ржкрж╛рж░рзЗ")
    return signals

# Streamlit UI рж╢рзБрж░рзБ
st.set_page_config(page_title="ржорж┐ржо ржХржпрж╝рзЗржи ржмрж┐рж╢рзНрж▓рзЗрж╖ржХ", page_icon="ЁЯУИ")
st.title("ЁЯкЩ ржорж┐ржо ржХржпрж╝рзЗржи ржорж╛рж░рзНржХрзЗржЯ ржмрж┐рж╢рзНрж▓рзЗрж╖ржХ (AI BUY / SELL + Candlestick Pattern)")

symbol_input = st.text_input("Binance Symbol ржжрж┐ржи (ржпрзЗржоржи: PEPEUSDT, BTCUSDT)", value="PEPEUSDT")

if st.button("ЁЯУИ рж╕ржорзНржкрзВрж░рзНржг ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржжрзЗржЦрзБржи"):
    try:
        df = get_binance_klines(symbol=symbol_input)
        price_series = df["close"]
        rsi = calculate_rsi(price_series).iloc[-1]
        macd, signal_line = calculate_macd(price_series)
        price_change = ((price_series.iloc[-1] - price_series.iloc[-2]) / price_series.iloc[-2]) * 100
        volume = df["volume"].iloc[-1]

        decision = ai_decision(rsi, macd, signal_line, price_change, volume)

        st.subheader("ЁЯУК ржЯрзЗржХржирж┐ржХрзНржпрж╛рж▓ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг")
        st.markdown(f"""
        - ЁЯТ╡ **рж╢рзЗрж╖ ржжрж╛ржо:** ${price_series.iloc[-1]:.6f}  
        - ЁЯУЙ **RSI:** {rsi:.2f}  
        - ЁЯза **AI рж╕рж┐ржжрзНржзрж╛ржирзНржд:** {decision}
        """)

        st.subheader("ЁЯХпя╕П ржХрзНржпрж╛ржирзНржбрзЗрж▓ ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржмрж┐рж╢рзНрж▓рзЗрж╖ржг")
        patterns = detect_patterns(df)
        if patterns:
            for p in patterns:
                st.success(p)
        else:
            st.info("ЁЯУн ржХрзЛржирзЛ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржХрзНржпрж╛ржирзНржбрзЗрж▓ ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐")
    except Exception as e:
        st.error(f"тЭМ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ: {e}")
        
