import streamlit as st
import requests
import pandas as pd

# ====== Function: RSI Calculation ======
def calculate_rsi(prices, period=14):
    delta = prices.diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# ====== Function: AI Trading Signal ======
def ai_decision(rsi, price_change, volume):
    if rsi > 70 and price_change < 0:
        return "ЁЯФ┤ SELL - Overbought ржПржмржВ ржжрж╛ржо ржХржоржЫрзЗред"
    elif rsi < 30 and price_change > 0:
        return "ЁЯЯв BUY - Oversold ржПржмржВ ржжрж╛ржо ржмрж╛ржбрж╝ржЫрзЗред"
    elif 30 <= rsi <= 70 and abs(price_change) < 1:
        return "ЁЯЯб HOLD - ржорж╛рж░рзНржХрзЗржЯ рж╕рзНржерж┐рж░ред"
    else:
        return "тЪая╕П ржЕржирж┐рж╢рзНржЪрж┐ржд ржЕржмрж╕рзНржерж╛, рж╕рждрж░рзНржХ ржерж╛ржХрзБржиред"

st.set_page_config(page_title="AI ржХрзНрж░рж┐ржкрзНржЯрзЛ ржЯрзНрж░рзЗржбрж┐ржВ ржЕрзНржпрж╛ржбржнрж╛ржЗржЬрж╛рж░", page_icon="ЁЯдЦ")
st.title("ЁЯдЦ AI ржХрзНрж░рж┐ржкрзНржЯрзЛ ржЯрзНрж░рзЗржбрж┐ржВ ржЕрзНржпрж╛ржбржнрж╛ржЗржЬрж╛рж░")

option = st.radio("ЁЯФН ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржзрж░ржи ржмрж╛ржЫрж╛ржЗ ржХрж░рзБржи:",
                  ("DexScreener URL", "CoinGecko URL", "ржХржпрж╝рзЗржирзЗрж░ ржирж╛ржо ржжрж┐ржпрж╝рзЗ (Search)"))

if option == "DexScreener URL":
    url_input = st.text_input("ЁЯФЧ DexScreener URL ржжрж┐ржи (ржпрзЗржоржи: https://dexscreener.com/solana/....)")

    if st.button("ЁЯУК ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржХрж░рзБржи") and url_input:
        parts = url_input.replace("https://dexscreener.com/", "").split("/")
        if len(parts) < 2:
            st.error("тЭМ DexScreener URL ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯ")
        else:
            chain, pair = parts[0], parts[1]
            chart_url = f"https://api.dexscreener.com/latest/dex/chart/{chain}/{pair}"
            meta_url = f"https://api.dexscreener.com/latest/dex/pairs/{chain}/{pair}"

            chart_response = requests.get(chart_url)
            if chart_response.status_code == 200:
                try:
                    chart = chart_response.json()
                    candles = chart.get("candles", [])
                    close_prices = [c[4] for c in candles]
                    price_series = pd.Series(close_prices)
                    rsi_value = calculate_rsi(price_series).iloc[-1] if not price_series.empty else 0
                except Exception as e:
                    st.error(f"тЭМ ржЪрж╛рж░рзНржЯ ржб
