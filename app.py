import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

const OPENAI_API_KEY = "YOUR_API_KEY"; // ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ GPT key ‡¶¨‡¶∏‡¶æ‡¶ì

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'AI Coin Advisor (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ)',
      theme: ThemeData(primarySwatch: Colors.green),
      home: CoinAdvisorPage(),
    );
  }
}

class CoinAdvisorPage extends StatefulWidget {
  @override
  _CoinAdvisorPageState createState() => _CoinAdvisorPageState();
}

class _CoinAdvisorPageState extends State<CoinAdvisorPage> {
  final TextEditingController _controller = TextEditingController();
  String _result = "";
  bool _loading = false;

  Future<void> fetchAndAnalyze(String coinSymbol) async {
    setState(() {
      _loading = true;
      _result = "";
    });

    final coin = coinSymbol.toLowerCase();
    final url =
        'https://api.coingecko.com/api/v3/coins/$coin?localization=false&tickers=false&market_data=true&community_data=false&developer_data=false&sparkline=false';

    try {
      final response = await http.get(Uri.parse(url));
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final name = data['name'];
        final price = data['market_data']['current_price']['usd'];
        final change1h = data['market_data']['price_change_percentage_1h_in_currency']['usd'];
        final change24h = data['market_data']['price_change_percentage_24h_in_currency']['usd'];
        final marketCap = data['market_data']['market_cap']['usd'];

        final prompt = """
$coinSymbol ‡¶ï‡ßü‡ßá‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßã ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡ßü ‡¶¨‡¶≤‡ßã ‚Äî ‡¶è‡¶ñ‡¶® ‡¶ï‡¶ø‡¶®‡¶¨‡ßã, ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø ‡¶ï‡¶∞‡¶¨‡ßã, ‡¶®‡¶æ ‡¶π‡ßã‡¶≤‡ßç‡¶° ‡¶ï‡¶∞‡¶¨‡ßã‡•§

‡¶®‡¶æ‡¶Æ: $name  
‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¶‡¶æ‡¶Æ: \$${price.toStringAsFixed(3)}  
‡ßß ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡ßü ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®: ${change1h.toStringAsFixed(2)}%  
‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡ßü ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®: ${change24h.toStringAsFixed(2)}%  
‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™: \$${(marketCap / 1e9).toStringAsFixed(2)}B

‡¶ü‡ßç‡¶∞‡ßá‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶Ü‡¶§‡ßç‡¶Æ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏‡ßÄ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶¶‡¶æ‡¶ì, ‡¶≠‡ßü ‡¶®‡¶æ ‡¶¶‡ßá‡¶ñ‡¶ø‡ßü‡ßá‡•§ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™‡ßá ‡¶¨‡¶≤‡ßã‡•§
""";

        final aiResponse = await http.post(
          Uri.parse("https://api.openai.com/v1/chat/completions"),
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer $OPENAI_API_KEY',
          },
          body: jsonEncode({
            "model": "gpt-3.5-turbo",
            "messages": [
              {"role": "user", "content": prompt}
            ],
            "max_tokens": 200,
            "temperature": 0.7,
          }),
        );

        if (aiResponse.statusCode == 200) {
          final aiData = jsonDecode(aiResponse.body);
          setState(() {
            _result = aiData['choices'][0]['message']['content'];
          });
        } else {
          setState(() {
            _result = "AI ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá (${aiResponse.statusCode})";
          });
        }
      } else {
        setState(() {
          _result = "‡¶è‡¶á ‡¶ï‡ßü‡ßá‡¶®‡¶ü‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø ‡¶¨‡¶æ CoinGecko API error (${response.statusCode})";
        });
      }
    } catch (e) {
      setState(() {
        _result = "‡¶è‡¶ï‡ßç‡¶∏‡ßá‡¶™‡¶∂‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá: $e";
      });
    }

    setState(() {
      _loading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('AI Coin Advisor (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ)')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: '‡¶ï‡ßü‡ßá‡¶® ‡¶≤‡¶ø‡¶ñ‡ßã (‡¶Ø‡ßá‡¶Æ‡¶®: sol, btc, pepe)',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 12),
            ElevatedButton(
              onPressed: _loading
                  ? null
                  : () {
                      if (_controller.text.isNotEmpty) {
                        fetchAndAnalyze(_controller.text.trim());
                      }
                    },
              child: _loading
                  ? CircularProgressIndicator(color: Colors.white)
                  : Text("üß† AI ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì"),
            ),
            SizedBox(height: 20),
            Expanded(
              child: SingleChildScrollView(
                child: Text(
                  _result,
                  style: TextStyle(fontSize: 16),
                ),
              ),
            )
          ],
        ),
      ),
    );
  }
}
