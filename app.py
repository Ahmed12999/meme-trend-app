import streamlit as st
import requests
import pandas as pd

# RSI ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗрж╢ржи ржлрж╛ржВрж╢ржи
def calculate_rsi(prices, period=14):
    delta = prices.diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# AI ржбрж┐рж╕рж┐рж╢ржи ржлрж╛ржВрж╢ржи
def ai_decision(rsi, price_change, volume):
    if rsi > 70 and price_change < 0:
        return "ЁЯФ┤ ржПржЦржи ржмрж┐ржХрзНрж░рж┐ ржХрж░рзБржи (SELL) - ржорж╛рж░рзНржХрзЗржЯ ржбрж╛ржЙржи ржЯрзНрж░рзЗржирзНржбрзЗ ржПржмржВ Overbought ржЕржмрж╕рзНржерж╛ред"
    elif rsi < 30 and price_change > 0:
        return "ЁЯЯв ржПржЦржи ржХрж┐ржирзБржи (BUY) - ржжрж╛ржо ржмрж╛ржбрж╝ржЫрзЗ ржПржмржВ Oversold, ржнрж╛рж▓рзЛ рж╕рзБржпрзЛржЧред"
    elif 30 <= rsi <= 70 and abs(price_change) < 1:
        return "ЁЯЯб ржПржЦржи HOLD ржХрж░рж╛ ржирж┐рж░рж╛ржкржж - ржорж╛рж░рзНржХрзЗржЯ рж╕рзНржерж┐рж░ ржПржмржВ ржирж┐рж░ржкрзЗржХрзНрж╖ RSIред"
    else:
        return "тЪая╕П ржорж╛рж░рзНржХрзЗржЯ ржЕржирж┐рж╢рзНржЪрж┐ржд, рж╕рждрж░рзНржХ ржерж╛ржХрзБржиред RSI: {:.2f}".format(rsi)

# UI рж╢рзБрж░рзБ
st.set_page_config(page_title="ржХрзНрж░рж┐ржкрзНржЯрзЛ ржмрж┐рж╢рзНрж▓рзЗрж╖ржХ", page_icon="ЁЯУИ")
st.title("ЁЯкЩ ржХрзНрж░рж┐ржкрзНржЯрзЛ ржорж╛рж░рзНржХрзЗржЯ ржмрж┐рж╢рзНрж▓рзЗрж╖ржХ (AI + CoinGecko)")

# -------- CoinGecko рж╕рж╛рж░рзНржЪ --------
token_name = st.text_input("ЁЯФН ржХржпрж╝рзЗржирзЗрж░ ржирж╛ржо рж▓рж┐ржЦрзБржи (ржпрзЗржоржи: pi, pepe, bonk, doge)")

if st.button("ЁЯФО CoinGecko ржерзЗржХрзЗ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг ржЖржирзБржи") and token_name:
    search_url = f"https://api.coingecko.com/api/v3/search?query={token_name.lower()}"
    try:
        search_resp = requests.get(search_url)
        if search_resp.status_code != 200:
            st.error("CoinGecko рж╕рж╛рж░рзНржЪ ржХрж╛ржЬ ржХрж░рзЗржирж┐")
        else:
            results = search_resp.json().get("coins", [])
            if not results:
                st.warning(f"'{token_name}' рж╕ржорзНржкрж░рзНржХрж┐ржд ржХрзЛржирзЛ ржХржпрж╝рзЗржи ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред")
            else:
                selected = results[0]
                coin_id = selected['id']
                coin_url = f"https://api.coingecko.com/api/v3/coins/{coin_id}?localization=false&tickers=false&market_data=true"
                res = requests.get(coin_url)
                if res.status_code != 200:
                    st.error("тЪая╕П CoinGecko token ржбрзЗржЯрж╛ ржЖржирждрзЗ рж╕ржорж╕рзНржпрж╛")
                else:
                    data = res.json()
                    name = data.get("name")
                    symbol = data.get("symbol", "").upper()
                    price = data['market_data']['current_price']['usd']
                    volume = data['market_data']['total_volume']['usd']
                    price_change = data['market_data']['price_change_percentage_1h_in_currency']['usd']

                    # RSI ржЖржорж░рж╛ CoinGecko ржерзЗржХрзЗ ржЖржирждрзЗ ржкрж╛рж░рж┐ ржирж╛, рждрж╛ржЗ ржЖржирзБржорж╛ржирж┐ржХ ржзрж░рж┐
                    rsi_value = 50
                    signal = ai_decision(rsi_value, price_change, volume)

                    st.success(f"ЁЯУК CoinGecko ржмрж┐рж╢рзНрж▓рзЗрж╖ржг: {name} ({symbol})")
                    st.markdown(f"""
                    - ЁЯТ╡ ржжрж╛ржо: ${price:.4f}  
                    - ЁЯФД рзз ржШржгрзНржЯрж╛рж░ ржкрж░рж┐ржмрж░рзНрждржи: {price_change:.2f}%  
                    - ЁЯУж рзирзк ржШржгрзНржЯрж╛рж░ ржнрж▓рж┐ржЙржо: ${volume:,.0f}  
                    - ЁЯУИ RSI (Estimate): {rsi_value}  
                    - ЁЯдЦ рж╕рж┐ржжрзНржзрж╛ржирзНржд: **{signal}**
                    """)
    except Exception as e:
        st.error(f"тЭМ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗ: {e}")
        
