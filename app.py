import streamlit as st
import requests
import pandas as pd

# RSI ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨

def calculate_rsi(prices, period=14):
    delta = prices.diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# EMA & MACD

def calculate_macd(prices):
    ema12 = prices.ewm(span=12, adjust=False).mean()
    ema26 = prices.ewm(span=26, adjust=False).mean()
    macd = ema12 - ema26
    signal = macd.ewm(span=9, adjust=False).mean()
    return macd, signal


def calculate_ema(prices, period=14):
    return prices.ewm(span=period, adjust=False).mean()

# AI ‡¶°‡¶ø‡¶∏‡¶ø‡¶∂‡¶®

def ai_decision(rsi, macd, signal_line, price_change, volume):
    if macd.iloc[-1] > signal_line.iloc[-1]:
        trend_signal = "\U0001F4C8 MACD ‡¶¨‡¶≤‡¶õ‡ßá ‡¶¶‡¶æ‡¶Æ ‡¶¨‡¶æ‡¶°‡¶º‡¶¨‡ßá‡•§"
    else:
        trend_signal = "\U0001F4C9 MACD ‡¶¨‡¶≤‡¶õ‡ßá ‡¶¶‡¶æ‡¶Æ ‡¶ï‡¶Æ‡¶¨‡ßá‡•§"

    if rsi > 70 and price_change < 0:
        return f"\U0001F534 ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® (SELL)\n{trend_signal}"
    elif rsi < 30 and price_change > 0:
        return f"\U0001F7E2 ‡¶ï‡¶ø‡¶®‡ßÅ‡¶® (BUY)\n{trend_signal}"
    elif 30 <= rsi <= 70:
        return f"\U0001F7E1 HOLD ‡¶ï‡¶∞‡ßÅ‡¶®\n{trend_signal}"
    else:
        return f"\u26A0\uFE0F ‡¶∏‡¶§‡¶∞‡ßç‡¶ï ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®\n{trend_signal}"

# ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®

def analyze_coin(name, symbol, price, price_change, volume, chain, mcap):
    history = [price * (1 + (price_change / 100) * i / 10) for i in range(30)]
    price_series = pd.Series(history)
    rsi_value = calculate_rsi(price_series).iloc[-1]
    ema_value = calculate_ema(price_series).iloc[-1]
    macd, signal_line = calculate_macd(price_series)
    signal = ai_decision(rsi_value, macd, signal_line, price_change, volume)

    st.success(f"‚úÖ {name} ({symbol}) ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£")
    st.markdown(f"""
    - üåê **‡¶ö‡ßá‡¶á‡¶®:** {chain}
    - üíµ **‡¶¶‡¶æ‡¶Æ:** ${price:.8f}
    - üìä **‡ßß ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡ßü ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®:** {price_change:.2f}%
    - üì¶ **‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡¶∞ ‡¶≠‡¶≤‡¶ø‡¶â‡¶Æ:** ${volume:,.0f}
    - üß¢ **‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™:** {mcap}

    ### üìà ‡¶ü‡ßá‡¶ï‡¶®‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤:
    - RSI: {rsi_value:.2f}
    - EMA: {ema_value:.6f}
    - MACD: {macd.iloc[-1]:.6f} | Signal: {signal_line.iloc[-1]:.6f}

    ### ü§ñ AI ‡¶∏‡¶ø‡¶¶‡ßç‡¶ß‡¶æ‡¶®‡ßç‡¶§:
    {signal}
    """)

# UI

st.set_page_config(page_title="‡¶Æ‡¶ø‡¶Æ ‡¶ï‡¶Ø‡¶º‡ßá‡¶® ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶ï", page_icon="üìà")
st.title("ü™ô ‡¶Æ‡¶ø‡¶Æ ‡¶ï‡¶Ø‡¶º‡ßá‡¶® ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶ï (AI + RSI, MACD, EMA + Trending)")

option = st.radio("üîç ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®", ("DexScreener (‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá)", "CoinGecko", "‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶Æ‡¶ø‡¶Æ ‡¶ï‡¶Ø‡¶º‡ßá‡¶®"))

# DexScreener ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£
if option == "DexScreener (‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá)":
    token_name = st.text_input("‚úèÔ∏è ‡¶ü‡ßã‡¶ï‡ßá‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: pi, bonk, pepe)")
    if token_name:
        url = f"https://api.dexscreener.com/latest/dex/search/?q={token_name.lower()}"
        res = requests.get(url)
        if res.status_code == 200:
            data = res.json()
            if 'pairs' in data and data['pairs']:
                pairs = data['pairs']
                options = [f"{p['baseToken']['name']} ({p['baseToken']['symbol']}) - {p['chainId']}" for p in pairs]
                selected = st.selectbox("üß† Token ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:", options)
                index = options.index(selected)
                analyze_coin(
                    pairs[index]['baseToken']['name'],
                    pairs[index]['baseToken']['symbol'],
                    float(pairs[index]['priceUsd']),
                    float(pairs[index]['priceChange']['h1']),
                    pairs[index]['volume']['h24'],
                    pairs[index]['chainId'],
                    pairs[index].get('fdv', 'N/A')
                )
            else:
                st.warning("‚ö†Ô∏è ‡¶ï‡ßã‡¶®‡ßã ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
        else:
            st.error("‚ùå DexScreener API ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

# CoinGecko
elif option == "CoinGecko":
    token_url = st.text_input("üîó CoinGecko URL ‡¶¶‡¶ø‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: https://www.coingecko.com/en/coins/pepe)")
    if token_url:
        try:
            token = token_url.rstrip("/").split("/")[-1]
            cg_api = f"https://api.coingecko.com/api/v3/coins/{token}?localization=false&tickers=false&market_data=true"
            res = requests.get(cg_api)
            if res.status_code == 200:
                data = res.json()
                name = data['name']
                symbol = data['symbol'].upper()
                price = data['market_data']['current_price']['usd']
                volume = data['market_data']['total_volume']['usd']
                price_change = data['market_data']['price_change_percentage_1h_in_currency']['usd']
                mcap = data['market_data']['market_cap']['usd']

                analyze_coin(name, symbol, price, price_change, volume, "CoinGecko", mcap)
            else:
                st.warning("‚ö†Ô∏è CoinGecko token ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
        except Exception as e:
            st.error(f"‚ùå CoinGecko ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")

# Trending Meme Coins (DexScreener Top Trending)
elif option == "‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶Æ‡¶ø‡¶Æ ‡¶ï‡¶Ø‡¶º‡ßá‡¶®":
    st.subheader("üöÄ ‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶Æ‡¶ø‡¶Æ ‡¶ï‡¶Ø‡¶º‡ßá‡¶® (DexScreener Trending)")
    trending_url = "https://api.dexscreener.com/latest/dex/pairs"
    res = requests.get(trending_url)
    if res.status_code == 200:
        data = res.json()
        top_10 = data['pairs'][:10]
        for pair in top_10:
            with st.expander(f"üîé {pair['baseToken']['name']} ({pair['baseToken']['symbol']}) - {pair['chainId']}"):
                analyze_coin(
                    pair['baseToken']['name'],
                    pair['baseToken']['symbol'],
                    float(pair['priceUsd']),
                    float(pair['priceChange']['h1']),
                    pair['volume']['h24'],
                    pair['chainId'],
                    pair.get('fdv', 'N/A')
                )
    else:
        st.error("‚ùå ‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶ø‡¶Ç ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        
