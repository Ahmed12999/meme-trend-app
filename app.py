import streamlit as st
import requests
import pandas as pd

# RSI ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶∂‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def calculate_rsi(prices, period=14):
    delta = prices.diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=period).mean()
    avg_loss = loss.rolling(window=period).mean()
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# AI ‡¶°‡¶ø‡¶∏‡¶ø‡¶∂‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
def ai_decision(rsi, price_change, volume):
    if rsi > 70 and price_change < 0:
        return "üî¥ ‡¶è‡¶ñ‡¶® ‡¶¨‡¶ø‡¶ï‡ßç‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® (SELL) - ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶°‡¶æ‡¶â‡¶® ‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°‡ßá ‡¶è‡¶¨‡¶Ç Overbought ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡•§"
    elif rsi < 30 and price_change > 0:
        return "üü¢ ‡¶è‡¶ñ‡¶® ‡¶ï‡¶ø‡¶®‡ßÅ‡¶® (BUY) - ‡¶¶‡¶æ‡¶Æ ‡¶¨‡¶æ‡¶°‡¶º‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç Oversold, ‡¶≠‡¶æ‡¶≤‡ßã ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó‡•§"
    elif 30 <= rsi <= 70 and abs(price_change) < 1:
        return "üü° ‡¶è‡¶ñ‡¶® HOLD ‡¶ï‡¶∞‡¶æ ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ - ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶∏‡ßç‡¶•‡¶ø‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶®‡¶ø‡¶∞‡¶™‡ßá‡¶ï‡ßç‡¶∑ RSI‡•§"
    else:
        return "‚ö†Ô∏è ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶Ö‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§, ‡¶∏‡¶§‡¶∞‡ßç‡¶ï ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®‡•§ RSI: {:.2f}".format(rsi)

# UI ‡¶∂‡ßÅ‡¶∞‡ßÅ
st.set_page_config(page_title="‡¶Æ‡¶ø‡¶Æ ‡¶ï‡¶Ø‡¶º‡ßá‡¶® ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶ï", page_icon="üìà")
st.title("ü™ô ‡¶Æ‡¶ø‡¶Æ ‡¶ï‡¶Ø‡¶º‡ßá‡¶® ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶ï (AI BUY / SELL + Pump.fun)")

option = st.radio(
    "üîç ‡¶ï‡ßã‡¶®‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?",
    ("‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡ßü‡ßá (Token Name)", "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá (Token Address)")
)

# -------- Option 1: Name Based Analysis --------
if option == "‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡ßü‡ßá (Token Name)":
    token_name = st.text_input("‚úèÔ∏è ‡¶Æ‡¶ø‡¶Æ ‡¶ï‡¶Ø‡¶º‡ßá‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶® (‡¶Ø‡ßá‡¶Æ‡¶®: pepe, bonk, doge)")

    if st.button("üìä ‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶° ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®"):
        if not token_name:
            st.warning("‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ü‡ßã‡¶ï‡ßá‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®!")
        else:
            url = f"https://api.dexscreener.com/latest/dex/search/?q={token_name.lower()}"
            try:
                response = requests.get(url)
                data = response.json()

                if 'pairs' not in data or len(data['pairs']) == 0:
                    st.error(f"'{token_name}' ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø üòì")
                else:
                    pair = data['pairs'][0]
                    name = pair['baseToken']['name']
                    symbol = pair['baseToken']['symbol']
                    price = float(pair['priceUsd'])
                    chain = pair['chainId']
                    mcap = pair.get('fdv', 'N/A')
                    volume = pair['volume']['h24']
                    price_change = float(pair['priceChange']['h1'])

                    trend = "üìà UP" if price_change > 0 else "üìâ DOWN"

                    # RSI ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨
                    history = [price * (1 + (price_change / 100) * i / 10) for i in range(30)]
                    price_series = pd.Series(history)
                    rsi_value = calculate_rsi(price_series).iloc[-1]

                    signal = ai_decision(rsi_value, price_change, volume)

                    st.success(f"‚úÖ **{name} ({symbol})** ‡¶è‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£")
                    st.markdown(f"""
                    - üåê **‡¶ö‡ßá‡¶á‡¶®:** {chain}  
                    - üíµ **‡¶¶‡¶æ‡¶Æ:** ${price:.8f}  
                    - üìä **‡ßß ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡ßü ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®:** {price_change:.2f}%  
                    - üì¶ **‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡¶∞ ‡¶≠‡¶≤‡¶ø‡¶â‡¶Æ:** ${volume:,}  
                    - üß¢ **‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™ (FDV):** {mcap}  
                    - üì° **‡¶ü‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°:** {trend}  
                    - üìà **RSI:** {rsi_value:.2f}  
                    - ü§ñ **AI ‡¶°‡¶ø‡¶∏‡¶ø‡¶∂‡¶®:** {signal}
                    """)
            except Exception as e:
                st.error(f"‚ùå ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")

# -------- Option 2: Address Based Analysis (Pump.fun etc.) --------
elif option == "‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏ ‡¶¶‡¶ø‡ßü‡ßá (Token Address)":
    token_address = st.text_input("üîó ‡¶ü‡ßã‡¶ï‡ßá‡¶®‡ßá‡¶∞ ‡¶†‡¶ø‡¶ï‡¶æ‡¶®‡¶æ (address) ‡¶¶‡¶ø‡¶®")

    if st.button("üß† ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®"):
        if not token_address:
            st.warning("‚ö†Ô∏è ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡ßç‡¶∞‡ßá‡¶∏ ‡¶¶‡¶ø‡¶®!")
        else:
            url = f"https://api.dexscreener.com/latest/dex/pairs/solana/{token_address}"
            try:
                response = requests.get(url)
                data = response.json()

                name = data['pair']['baseToken']['name']
                symbol = data['pair']['baseToken']['symbol']
                price = float(data['pair']['priceUsd'])
                liquidity = data['pair']['liquidity']['usd']
                volume = data['pair']['volume']['h24']
                mcap = data['pair'].get('fdv', 'N/A')
                price_change = float(data['pair']['priceChange']['h1'])

                # RSI ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨
                history = [price * (1 + (price_change / 100) * i / 10) for i in range(30)]
                price_series = pd.Series(history)
                rsi_value = calculate_rsi(price_series).iloc[-1]

                signal = ai_decision(rsi_value, price_change, volume)

                # Pump Score
                pump_score = 0
                if liquidity < 10000: pump_score += 30
                if volume > 5000: pump_score += 30
                if rsi_value < 40: pump_score += 40
                pump_score = min(pump_score, 100)

                st.success(f"‚úÖ **{name} ({symbol})** Token Address ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£")
                st.markdown(f"""
                - üíµ **‡¶¶‡¶æ‡¶Æ:** ${price:.8f}  
                - üíß **‡¶≤‡¶ø‡¶ï‡ßÅ‡¶á‡¶°‡¶ø‡¶ü‡¶ø:** ${liquidity:,}  
                - üì¶ **‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡¶∞ ‡¶≠‡¶≤‡¶ø‡¶â‡¶Æ:** ${volume:,}  
                - üß¢ **‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü ‡¶ï‡ßç‡¶Ø‡¶æ‡¶™:** {mcap}  
                - üìà **RSI:** {rsi_value:.2f}  
                - ü§ñ **AI ‡¶°‡¶ø‡¶∏‡¶ø‡¶∂‡¶®:** {signal}  
                - üöÄ **Pump Score:** {pump_score}/100
                """)
            except Exception as e:
                st.error(f"‚ùå ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: {e}")
                
