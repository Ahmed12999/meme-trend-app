def ai_decision(rsi, macd, signal, price_change, volume, strictness="medium"):
    decision = ""

    # RSI ржбрж┐рж╕рж┐рж╢ржи - strictness ржЕржирзБржпрж╛ржпрж╝рзА ржерзНрж░рзЗрж╢рж╣рзЛрж▓рзНржб ржкрж░рж┐ржмрж░рзНрждржи
    rsi_oversold = 30 if strictness == "low" else 35 if strictness == "medium" else 40
    rsi_overbought = 70 if strictness == "low" else 65 if strictness == "medium" else 60

    if rsi < rsi_oversold:
        decision += "ЁЯУЙ RSI ржХржо (Oversold)ред ржжрж╛ржо ржмрж╛рзЬрж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ ржЖржЫрзЗред\n"
    elif rsi > rsi_overbought:
        decision += "ЁЯУИ RSI ржмрзЗрж╢рж┐ (Overbought)ред ржжрж╛ржо ржХржорждрзЗ ржкрж╛рж░рзЗред\n"
    else:
        decision += "ЁЯУК RSI ржорж╛ржЭрж╛ржорж╛ржЭрж┐, ржорж╛рж░рзНржХрзЗржЯ рж╕рж╛ржЗржбржУрзЯрзЗ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗред\n"

    macd_val = macd.iloc[-1]
    signal_val = signal.iloc[-1]

    if macd_val > signal_val:
        decision += "тЬЕ MACD bullish crossover (Buy signal)ред\n"
    elif macd_val < signal_val:
        decision += "тЭМ MACD bearish crossover (Sell signal)ред\n"
    else:
        decision += "тП╕я╕П MACD ржирж┐рж░ржкрзЗржХрзНрж╖ред\n"

    price_change_threshold = 0.5 if strictness == "low" else 1 if strictness == "medium" else 1.5

    if price_change > price_change_threshold:
        decision += f"ЁЯЪА 1h ржкрзНрж░рж╛ржЗрж╕ +{price_change:.2f}% тАФ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржорзБржнржорзЗржирзНржЯ!\n"
    elif price_change < -price_change_threshold:
        decision += f"тЪая╕П 1h ржкрзНрж░рж╛ржЗрж╕ {price_change:.2f}% тАФ ржжрзБрж░рзНржмрж▓рждрж╛ред\n"
    else:
        decision += f"тП│ 1h ржкрзНрж░рж╛ржЗрж╕ ржкрж░рж┐ржмрж░рзНрждржи ржЦрзБржм ржХржоред\n"

    avg_volume = 1000000
    if volume > avg_volume * 1.5:
        decision += "ЁЯУИ ржнрж▓рж┐ржЙржо рж╕рзНржкрж╛ржЗржХ! ржЯрзНрж░рзЗржбрзЗ ржЙржЪрзНржЪ рж╕ржХрзНрж░рж┐рзЯрждрж╛ ржЪрж▓ржЫрзЗред\n"
    else:
        decision += "ЁЯУЙ ржнрж▓рж┐ржЙржо рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХред\n"

    if strictness == "high":
        if rsi < rsi_oversold and macd_val > signal_val and volume > avg_volume * 1.5:
            decision += "\nЁЯЯв **AI ржкрж░рж╛ржорж░рзНрж╢: ржПржЦржи ржжрж╛ржо ржмрж╛рзЬрждрзЗ ржкрж╛рж░рзЗ, ржЯрзНрж░рзЗржб ржирж┐ржиред**"
        elif rsi > rsi_overbought and macd_val < signal_val:
            decision += "\nЁЯФ┤ **AI ржкрж░рж╛ржорж░рзНрж╢: ржжрж╛ржо ржЕржирзЗржХ ржмрзЗрзЬрзЗржЫрзЗ, ржПржЦржи рж╕рзЗрж▓ ржмрж╛ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред**"
        else:
            decision += "\nЁЯЯб **AI ржкрж░рж╛ржорж░рзНрж╢: ржорж╛рж░рзНржХрзЗржЯ ржЕржирж┐рж╢рзНржЪрж┐ржд, ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред**"
    elif strictness == "medium":
        if rsi < rsi_oversold and macd_val > signal_val and volume > avg_volume:
            decision += "\nЁЯЯв **AI ржкрж░рж╛ржорж░рзНрж╢: ржПржЦржи ржжрж╛ржо ржмрж╛рзЬрждрзЗ ржкрж╛рж░рзЗ, ржЯрзНрж░рзЗржб ржирж┐ржиред**"
        elif rsi > rsi_overbought and macd_val < signal_val:
            decision += "\nЁЯФ┤ **AI ржкрж░рж╛ржорж░рзНрж╢: ржжрж╛ржо ржЕржирзЗржХ ржмрзЗрзЬрзЗржЫрзЗ, ржПржЦржи рж╕рзЗрж▓ ржмрж╛ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред**"
        else:
            decision += "\nЁЯЯб **AI ржкрж░рж╛ржорж░рзНрж╢: ржорж╛рж░рзНржХрзЗржЯ ржЕржирж┐рж╢рзНржЪрж┐ржд, ржХрж┐ржЫрзБржХрзНрж╖ржг ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред**"
    else:  # low strictness
        decision += "\nЁЯЯв **AI ржкрж░рж╛ржорж░рзНрж╢: рж╣рж╛рж▓ржХрж╛ рж╕ржВржХрзЗржд ржЖржЫрзЗ, рж╕рж╛ржмржзрж╛ржирждрж╛рж░ рж╕рж╛ржерзЗ ржЯрзНрж░рзЗржб ржХрж░рзБржиред**"

    return decision


def bollinger_breakout_signal(price, upper_band, lower_band):
    if price > upper_band:
        return "ЁЯЪи ржжрж╛ржо Upper Bollinger Band ржПрж░ ржЙржкрж░рзЗ тАФ Breakout рж╣рждрзЗ ржкрж╛рж░рзЗ!"
    elif price < lower_band:
        return "ЁЯФ╗ ржжрж╛ржо Lower Bollinger Band ржПрж░ ржирж┐ржЪрзЗ тАФ Sell Pressure!"
    else:
        return "ЁЯУК ржжрж╛ржо Bollinger Band ржПрж░ ржнрзЗрждрж░рзЗ тАФ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржЧрждрж┐ржмрж┐ржзрж┐ред"


def calculate_sma_crossover(short_sma, long_sma):
    if len(short_sma) < 2 or len(long_sma) < 2:
        return "тЪк SMA рж╕рж┐ржЧржирзНржпрж╛рж▓ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржЬржирзНржп ржпржерзЗрж╖рзНржЯ ржбрзЗржЯрж╛ ржирзЗржЗред"

    prev_short = short_sma.iloc[-2]
    prev_long = long_sma.iloc[-2]
    curr_short = short_sma.iloc[-1]
    curr_long = long_sma.iloc[-1]

    if prev_short < prev_long and curr_short > curr_long:
        return "ЁЯЯв SMA ржХрзНрж░рж╕ржУржнрж╛рж░ - Buy рж╕рж┐ржЧржирзНржпрж╛рж▓"
    elif prev_short > prev_long and curr_short < curr_long:
        return "ЁЯФ┤ SMA ржбрзЗржержХрзНрж░рж╕ - Sell рж╕рж┐ржЧржирзНржпрж╛рж▓"
    else:
        return "тЪк SMA рж╕рж┐ржЧржирзНржпрж╛рж▓ ржирзЗржЗ"


def macd_histogram_signal(macd, signal):
    histogram = macd - signal
    if histogram.iloc[-1] > 0 and histogram.iloc[-2] <= 0:
        return "ЁЯЯв MACD рж╣рж┐рж╖рзНржЯрзЛржЧрзНрж░рж╛ржо ржЗрждрж┐ржмрж╛ржЪржХ ржкрзНрж░ржмржгрждрж╛ рж╢рзБрж░рзБ ржХрж░рзЗржЫрзЗред"
    elif histogram.iloc[-1] < 0 and histogram.iloc[-2] >= 0:
        return "ЁЯФ┤ MACD рж╣рж┐рж╖рзНржЯрзЛржЧрзНрж░рж╛ржо ржирзЗрждрж┐ржмрж╛ржЪржХ ржкрзНрж░ржмржгрждрж╛ рж╢рзБрж░рзБ ржХрж░рзЗржЫрзЗред"
    else:
        return "тЪк MACD рж╣рж┐рж╖рзНржЯрзЛржЧрзНрж░рж╛ржо рж╕рзНржерж┐рждрж┐рж╢рзАрж▓ред"


def candlestick_volume_ai(df):
    last_pattern = df['pattern'].dropna().iloc[-1] if df['pattern'].dropna().any() else None
    last_vol_spike = df['volume_spike'].iloc[-1]

    confidence = 0
    messages = []

    if last_pattern == "Bullish Engulfing":
        confidence += 3
        messages.append("ЁЯХпя╕П Bullish Engulfing ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ, ржпрж╛ ржжрж╛ржо ржмрж╛рзЬрж╛рж░ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржЗржЩрзНржЧрж┐рждред")
    elif last_pattern == "Bearish Engulfing":
        confidence -= 3
        messages.append("ЁЯХпя╕П Bearish Engulfing ржкрзНржпрж╛ржЯрж╛рж░рзНржи, ржжрж╛ржо ржХржорж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ ржЖржЫрзЗред")
    elif last_pattern == "Hammer":
        confidence += 2
        messages.append("ЁЯХпя╕П Hammer ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржжрж╛ржо ржкрзБржирж░рзБржжрзНржзрж╛рж░рзЗрж░ рж╕ржорзНржнрж╛ржмржирж╛ ржжрзЗржЦрж╛рзЯред")
    elif last_pattern == "Shooting Star":
        confidence -= 2
        messages.append("ЁЯХпя╕П Shooting Star ржкрзНржпрж╛ржЯрж╛рж░рзНржи рж╕рждрж░рзНржХрждрж╛, ржжрж╛ржо ржХржорждрзЗ ржкрж╛рж░рзЗред")
    elif last_pattern == "Doji":
        messages.append("ЁЯХпя╕П Doji ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржорж╛рж░рзНржХрзЗржЯрзЗ ржЕржирж┐рж╢рзНржЪрзЯрждрж╛ ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗред")
    else:
        messages.append("ЁЯХпя╕П ржХрзЛржи рж╕рзНржкрж╖рзНржЯ ржХрзНржпрж╛ржирзНржбрзЗрж▓рж╕рзНржЯрж┐ржХ ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")

    if last_vol_spike:
        confidence += 3
        messages.append("ЁЯУИ ржнрж▓рж┐ржЙржо рж╕рзНржкрж╛ржЗржХ ржжрзЗржЦрж╛ ржЧрзЗржЫрзЗ, ржмржбрж╝ ржЗржиржнрзЗрж╕рзНржЯрж░ (рж╣рзБржЗрж▓) ржкрзНрж░ржмрзЗрж╢ ржХрж░ржЫрзЗред")
    else:
        messages.append("ЁЯУЙ ржнрж▓рж┐ржЙржо рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ рж░рзЯрзЗржЫрзЗред")

    if confidence >= 4:
        strategy = "ЁЯЯв рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржмрж╛рзЯ ржЯрзНрж░рзЗржирзНржб, ржПржЦржи ржХрзЗржирж╛ржХрж╛ржЯрж╛ ржХрж░рж╛рж░ ржнрж╛рж▓рзЛ рж╕ржорзЯред"
    elif 1 <= confidence < 4:
        strategy = "ЁЯЯб рж╕ржорзНржнрж╛ржмржирж╛ржорзЯ ржкрж░рж┐рж╕рзНржерж┐рждрж┐, рж╕рждрж░рзНржХрждрж╛рж░ рж╕рж╛ржерзЗ ржЯрзНрж░рзЗржб ржХрж░рзБржиред"
    elif -3 <= confidence < 1:
        strategy = "ЁЯЯа ржЕржирж┐рж╢рзНржЪрж┐ржд ржорж╛рж░рзНржХрзЗржЯ, ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛ржЗ ржнрж╛рж▓рзЛред"
    else:
        strategy = "ЁЯФ┤ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржмрж┐рзЯрж╛рж░ ржЯрзНрж░рзЗржирзНржб, ржмрж┐ржХрзНрж░рж┐ ржмрж╛ ржжрзВрж░рзЗ ржерж╛ржХрж╛ ржнрж╛рж▓ред"

    full_message = "\n".join(messages) + f"\n\nЁЯУК Confidence Score: {confidence}\n\n**рж╕рзНржЯрзНрж░рзНржпрж╛ржЯрзЗржЬрж┐:** {strategy}"
    return full_message


def volume_spike_summary(spike):
    return "ЁЯУИ рж╣рзБржЗрж▓ ржЯрзНрж░рзЗржбрж╛рж░ ржврзБржХржЫрзЗ, рж╕рждрж░рзНржХржнрж╛ржмрзЗ Buy ржПржиржЯрзНрж░рж┐ ржмрж┐ржмрзЗржЪржирж╛ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗред" if spike else "ЁЯУЙ ржнрж▓рж┐ржЙржо рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ, рж╣рзБржЗрж▓ рж╕ржХрзНрж░рж┐рзЯ ржирзЯред"


def risk_signal(entry_price, current_price, sl_pct=5, tp_pct=10):
    sl = entry_price * (1 - sl_pct / 100)
    tp = entry_price * (1 + tp_pct / 100)
    msg = f"ЁЯОп ржПржирзНржЯрзНрж░рж┐: ${entry_price:.6f} тЖТ ЁЯОп SL: ${sl:.6f}, ЁЯПЖ TP: ${tp:.6f}"
    if current_price <= sl:
        msg += "\nЁЯФ┤ рж╕рзНржЯржк рж▓рж╕ рж╣рж┐ржЯ ржХрж░рзЗржЫрзЗ, ржХрзНрж╖рждрж┐ ржХржорж╛рждрзЗ рж╕рзЗрж▓ ржХрж░рзБржиред"
    elif current_price >= tp:
        msg += "\nЁЯЯв ржкрзНрж░ржлрж┐ржЯ ржЯрж╛рж░рзНржЧрзЗржЯ рж╣рж┐ржЯ, ржкрзНрж░ржлрж┐ржЯ ржмрзБржХ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗред"
    else:
        msg += "\nтП│ ржорж╛рж░рзНржХрзЗржЯ ржПржЦржиржУ рж▓ржХрзНрж╖рзНржпржорж╛рждрзНрж░рж╛рзЯ ржкрзМржБржЫрж╛рзЯржирж┐ред"
    return msg


def analyze_new_coin(coin_data):
    """
    Launchpad ржерзЗржХрзЗ ржЖрж╕рж╛ ржирждрзБржи meme coin-ржПрж░ ржЬржирзНржп рж╕рж╣ржЬ AI ржмрж┐рж╢рзНрж▓рзЗрж╖ржгред
    coin_data format:
    {
        'name': 'BONKZILLA',
        'price': 0.00000123,
        'liquidity': 1234,
        'volume_24h': 2345,
        'market_cap': 45678
    }
    """
    score = 0
    notes = []

    if coin_data.get('volume_24h', 0) > 10000:
        score += 1
        notes.append("ЁЯУК High volume (10k+)")
    if coin_data.get('liquidity', 0) > 5000:
        score += 1
        notes.append("ЁЯТз Liquidity ржнрж╛рж▓ (5k+)")
    if coin_data.get('market_cap', 0) < 100000:
        score += 1
        notes.append("ЁЯЪА Low market cap тАФ 100x рж╕ржорзНржнрж╛ржмржирж╛ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗ")

    if score == 3:
        verdict = "ЁЯФе рж╕ржорзНржнрж╛ржмрзНржп 100x ржорзЗржорзЗ ржХрзЯрзЗржи"
    elif score == 2:
        verdict = "тЬЕ ржнрж╛рж▓рзЛ рж╕ржорзНржнрж╛ржмржирж╛ ржЖржЫрзЗ"
    elif score == 1:
        verdict = "тЪая╕П ржиржЬрж░рзЗ рж░рж╛ржЦрзБржи"
    else:
        verdict = "тЭМ ржжрзБрж░рзНржмрж▓ coin тАФ ржПрзЬрж┐рзЯрзЗ ржЪрж▓рзБржи"

    return f"{verdict}\n\n{coin_data['name']} ржмрж┐рж╢рзНрж▓рзЗрж╖ржг:\n" + "\n".join(notes)
  
