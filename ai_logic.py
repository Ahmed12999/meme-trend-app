import pandas as pd

def ai_decision(rsi, macd, signal, price_change, volume):
    decision = ""

    if rsi < 30:
        decision += "ЁЯУЙ RSI ржХржо (Oversold)ред ржжрж╛ржо ржмрж╛рзЬрж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ ржЖржЫрзЗред\n"
    elif rsi > 70:
        decision += "ЁЯУИ RSI ржмрзЗрж╢рж┐ (Overbought)ред ржжрж╛ржо ржХржорждрзЗ ржкрж╛рж░рзЗред\n"
    else:
        decision += "ЁЯУК RSI ржорж╛ржЭрж╛ржорж╛ржЭрж┐, ржорж╛рж░рзНржХрзЗржЯ рж╕рж╛ржЗржбржУрзЯрзЗ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗред\n"

    if macd.iloc[-1] > signal.iloc[-1]:
        decision += "тЬЕ MACD bullish crossover (Buy signal)ред\n"
    elif macd.iloc[-1] < signal.iloc[-1]:
        decision += "тЭМ MACD bearish crossover (Sell signal)ред\n"
    else:
        decision += "тП╕я╕П MACD ржирж┐рж░ржкрзЗржХрзНрж╖ред\n"

    if price_change > 1:
        decision += f"ЁЯЪА 1h ржкрзНрж░рж╛ржЗрж╕ +{price_change:.2f}% тАФ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржорзБржнржорзЗржирзНржЯ!\n"
    elif price_change < -1:
        decision += f"тЪая╕П 1h ржкрзНрж░рж╛ржЗрж╕ {price_change:.2f}% тАФ ржжрзБрж░рзНржмрж▓рждрж╛ред\n"
    else:
        decision += f"тП│ 1h ржкрзНрж░рж╛ржЗрж╕ ржкрж░рж┐ржмрж░рзНрждржи ржЦрзБржм ржХржоред\n"

    avg_volume = 1000000
    if volume > avg_volume * 1.5:
        decision += "ЁЯУИ ржнрж▓рж┐ржЙржо рж╕рзНржкрж╛ржЗржХ! ржЯрзНрж░рзЗржбрзЗ ржЙржЪрзНржЪ рж╕ржХрзНрж░рж┐рзЯрждрж╛ ржЪрж▓ржЫрзЗред\n"
    else:
        decision += "ЁЯУЙ ржнрж▓рж┐ржЙржо рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХред\n"

    if rsi < 35 and macd.iloc[-1] > signal.iloc[-1] and volume > avg_volume:
        decision += "\nЁЯЯв **AI ржкрж░рж╛ржорж░рзНрж╢: ржПржЦржи ржжрж╛ржо ржмрж╛рзЬрждрзЗ ржкрж╛рж░рзЗ, ржЯрзНрж░рзЗржб ржирж┐ржиред**"
    elif rsi > 70 and macd.iloc[-1] < signal.iloc[-1]:
        decision += "\nЁЯФ┤ **AI ржкрж░рж╛ржорж░рзНрж╢: ржжрж╛ржо ржЕржирзЗржХ ржмрзЗрзЬрзЗржЫрзЗ, ржПржЦржи рж╕рзЗрж▓ ржмрж╛ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред**"
    else:
        decision += "\nЁЯЯб **AI ржкрж░рж╛ржорж░рзНрж╢: ржорж╛рж░рзНржХрзЗржЯ ржЕржирж┐рж╢рзНржЪрж┐ржд, ржХрж┐ржЫрзБржХрзНрж╖ржг ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред**"

    return decision


def bollinger_breakout_signal(price, upper_band, lower_band):
    if price > upper_band:
        return "ЁЯЪи ржжрж╛ржо Upper Bollinger Band ржПрж░ ржЙржкрж░рзЗ тАФ Breakout рж╣рждрзЗ ржкрж╛рж░рзЗ!"
    elif price < lower_band:
        return "ЁЯФ╗ ржжрж╛ржо Lower Bollinger Band ржПрж░ ржирж┐ржЪрзЗ тАФ Sell Pressure!"
    else:
        return "ЁЯУК ржжрж╛ржо Bollinger Band ржПрж░ ржнрзЗрждрж░рзЗ тАФ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржЧрждрж┐ржмрж┐ржзрж┐ред"


def calculate_sma_crossover(short_sma, long_sma):
    if len(short_sma) < 2 or len(long_sma) < 2:
        return "тЪк SMA рж╕рж┐ржЧржирзНржпрж╛рж▓ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржЬржирзНржп ржпржерзЗрж╖рзНржЯ ржбрзЗржЯрж╛ ржирзЗржЗред"

    prev_short = short_sma.iloc[-2]
    prev_long = long_sma.iloc[-2]
    curr_short = short_sma.iloc[-1]
    curr_long = long_sma.iloc[-1]

    if prev_short < prev_long and curr_short > curr_long:
        return "ЁЯЯв SMA ржХрзНрж░рж╕ржУржнрж╛рж░ - Buy рж╕рж┐ржЧржирзНржпрж╛рж▓"
    elif prev_short > prev_long and curr_short < curr_long:
        return "ЁЯФ┤ SMA ржбрзЗржержХрзНрж░рж╕ - Sell рж╕рж┐ржЧржирзНржпрж╛рж▓"
    else:
        return "тЪк SMA рж╕рж┐ржЧржирзНржпрж╛рж▓ ржирзЗржЗ"


def macd_histogram_signal(macd, signal):
    histogram = macd - signal
    if histogram.iloc[-1] > 0 and histogram.iloc[-2] <= 0:
        return "ЁЯЯв MACD рж╣рж┐рж╖рзНржЯрзЛржЧрзНрж░рж╛ржо ржЗрждрж┐ржмрж╛ржЪржХ ржкрзНрж░ржмржгрждрж╛ рж╢рзБрж░рзБ ржХрж░рзЗржЫрзЗред"
    elif histogram.iloc[-1] < 0 and histogram.iloc[-2] >= 0:
        return "ЁЯФ┤ MACD рж╣рж┐рж╖рзНржЯрзЛржЧрзНрж░рж╛ржо ржирзЗрждрж┐ржмрж╛ржЪржХ ржкрзНрж░ржмржгрждрж╛ рж╢рзБрж░рзБ ржХрж░рзЗржЫрзЗред"
    else:
        return "тЪк MACD рж╣рж┐рж╖рзНржЯрзЛржЧрзНрж░рж╛ржо рж╕рзНржерж┐рждрж┐рж╢рзАрж▓ред"


# тЬЕ ржирждрзБржи: ржХрзНржпрж╛ржирзНржбрзЗрж▓рж╕рзНржЯрж┐ржХ + ржнрж▓рж┐ржЙржо рж╕рзНржкрж╛ржЗржХ AI ржмрж┐рж╢рзНрж▓рзЗрж╖ржг
def candlestick_volume_ai(df):
    if 'pattern' not in df.columns or 'volume_spike' not in df.columns:
        return "тЪк ржХрзНржпрж╛ржирзНржбрзЗрж▓рж╕рзНржЯрж┐ржХ ржмрж╛ ржнрж▓рж┐ржЙржо рж╕рзНржкрж╛ржЗржХ ржбрзЗржЯрж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред"

    last_row = df.iloc[-1]
    pattern = last_row['pattern']
    volume_spike = last_row['volume_spike']

    if pd.isna(pattern):
        return "тЪк ржХрзЛржи ржХрзНржпрж╛ржирзНржбрзЗрж▓рж╕рзНржЯрж┐ржХ ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред"

    if pattern == "Bullish Engulfing" and volume_spike:
        return "ЁЯЯв Bullish Engulfing + ржнрж▓рж┐ржЙржо рж╕рзНржкрж╛ржЗржХ тАФ ржжрж╛ржо ржмрж╛рзЬрждрзЗ ржкрж╛рж░рзЗ, ржПржЦржи Buy ржХрж░рж╛ ржпрж╛рзЯред"
    elif pattern == "Bearish Engulfing" and volume_spike:
        return "ЁЯФ┤ Bearish Engulfing + ржнрж▓рж┐ржЙржо рж╕рзНржкрж╛ржЗржХ тАФ ржжрж╛ржо ржХржорждрзЗ ржкрж╛рж░рзЗ, Sell ржХрж░рж╛рж░ рж╕ржорзЯред"
    else:
        return f"тЪк ржХрзНржпрж╛ржирзНржбрзЗрж▓рж╕рзНржЯрж┐ржХ: {pattern}, ржХрж┐ржирзНрждрзБ ржнрж▓рж┐ржЙржо рж╕рзНржкрж╛ржЗржХ ржирзЗржЗред"
        
