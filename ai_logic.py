def ai_decision(rsi, macd, signal, price_change, volume):
┬а ┬а decision = ""

┬а ┬а if rsi < 30:
┬а ┬а ┬а ┬а decision += "ЁЯУЙ RSI ржХржо (Oversold)ред ржжрж╛ржо ржмрж╛рзЬрж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ ржЖржЫрзЗред\n"
┬а ┬а elif rsi > 70:
┬а ┬а ┬а ┬а decision += "ЁЯУИ RSI ржмрзЗрж╢рж┐ (Overbought)ред ржжрж╛ржо ржХржорждрзЗ ржкрж╛рж░рзЗред\n"
┬а ┬а else:
┬а ┬а ┬а ┬а decision += "ЁЯУК RSI ржорж╛ржЭрж╛ржорж╛ржЭрж┐, ржорж╛рж░рзНржХрзЗржЯ рж╕рж╛ржЗржбржУрзЯрзЗ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗред\n"

┬а ┬а if macd.iloc[-1] > signal.iloc[-1]:
┬а ┬а ┬а ┬а decision += "тЬЕ MACD bullish crossover (Buy signal)ред\n"
┬а ┬а elif macd.iloc[-1] < signal.iloc[-1]:
┬а ┬а ┬а ┬а decision += "тЭМ MACD bearish crossover (Sell signal)ред\n"
┬а ┬а else:
┬а ┬а ┬а ┬а decision += "тП╕я╕П MACD ржирж┐рж░ржкрзЗржХрзНрж╖ред\n"

┬а ┬а if price_change > 1:
┬а ┬а ┬а ┬а decision += f"ЁЯЪА 1h ржкрзНрж░рж╛ржЗрж╕ +{price_change:.2f}% тАФ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржорзБржнржорзЗржирзНржЯ!\n"
┬а ┬а elif price_change < -1:
┬а ┬а ┬а ┬а decision += f"тЪая╕П 1h ржкрзНрж░рж╛ржЗрж╕ {price_change:.2f}% тАФ ржжрзБрж░рзНржмрж▓рждрж╛ред\n"
┬а ┬а else:
┬а ┬а ┬а ┬а decision += f"тП│ 1h ржкрзНрж░рж╛ржЗрж╕ ржкрж░рж┐ржмрж░рзНрждржи ржЦрзБржм ржХржоред\n"

┬а ┬а avg_volume = 1000000
┬а ┬а if volume > avg_volume * 1.5:
┬а ┬а ┬а ┬а decision += "ЁЯУИ ржнрж▓рж┐ржЙржо рж╕рзНржкрж╛ржЗржХ! ржЯрзНрж░рзЗржбрзЗ ржЙржЪрзНржЪ рж╕ржХрзНрж░рж┐рзЯрждрж╛ ржЪрж▓ржЫрзЗред\n"
┬а ┬а else:
┬а ┬а ┬а ┬а decision += "ЁЯУЙ ржнрж▓рж┐ржЙржо рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХред\n"

┬а ┬а if rsi < 35 and macd.iloc[-1] > signal.iloc[-1] and volume > avg_volume:
┬а ┬а ┬а ┬а decision += "\nЁЯЯв **AI ржкрж░рж╛ржорж░рзНрж╢: ржПржЦржи ржжрж╛ржо ржмрж╛рзЬрждрзЗ ржкрж╛рж░рзЗ, ржЯрзНрж░рзЗржб ржирж┐ржиред**"
┬а ┬а elif rsi > 70 and macd.iloc[-1] < signal.iloc[-1]:
┬а ┬а ┬а ┬а decision += "\nЁЯФ┤ **AI ржкрж░рж╛ржорж░рзНрж╢: ржжрж╛ржо ржЕржирзЗржХ ржмрзЗрзЬрзЗржЫрзЗ, ржПржЦржи рж╕рзЗрж▓ ржмрж╛ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред**"
┬а ┬а else:
┬а ┬а ┬а ┬а decision += "\nЁЯЯб **AI ржкрж░рж╛ржорж░рзНрж╢: ржорж╛рж░рзНржХрзЗржЯ ржЕржирж┐рж╢рзНржЪрж┐ржд, ржХрж┐ржЫрзБржХрзНрж╖ржг ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржиред**"

┬а ┬а return decision

def bollinger_breakout_signal(price, upper_band, lower_band):
┬а ┬а if price > upper_band:
┬а ┬а ┬а ┬а return "ЁЯЪи ржжрж╛ржо Upper Bollinger Band ржПрж░ ржЙржкрж░рзЗ тАФ Breakout рж╣рждрзЗ ржкрж╛рж░рзЗ!"
┬а ┬а elif price < lower_band:
┬а ┬а ┬а ┬а return "ЁЯФ╗ ржжрж╛ржо Lower Bollinger Band ржПрж░ ржирж┐ржЪрзЗ тАФ Sell Pressure!"
┬а ┬а else:
┬а ┬а ┬а ┬а return "ЁЯУК ржжрж╛ржо Bollinger Band ржПрж░ ржнрзЗрждрж░рзЗ тАФ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржЧрждрж┐ржмрж┐ржзрж┐ред"

def calculate_sma_crossover(short_sma, long_sma):
┬а ┬а if len(short_sma) < 2 or len(long_sma) < 2:
┬а ┬а ┬а ┬а return "тЪк SMA рж╕рж┐ржЧржирзНржпрж╛рж▓ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ ржЬржирзНржп ржпржерзЗрж╖рзНржЯ ржбрзЗржЯрж╛ ржирзЗржЗред"

┬а ┬а prev_short = short_sma.iloc[-2]
┬а ┬а prev_long = long_sma.iloc[-2]
┬а ┬а curr_short = short_sma.iloc[-1]
┬а ┬а curr_long = long_sma.iloc[-1]

┬а ┬а if prev_short < prev_long and curr_short > curr_long:
┬а ┬а ┬а ┬а return "ЁЯЯв SMA ржХрзНрж░рж╕ржУржнрж╛рж░ - Buy рж╕рж┐ржЧржирзНржпрж╛рж▓"
┬а ┬а elif prev_short > prev_long and curr_short < curr_long:
┬а ┬а ┬а ┬а return "ЁЯФ┤ SMA ржбрзЗржержХрзНрж░рж╕ - Sell рж╕рж┐ржЧржирзНржпрж╛рж▓"
┬а ┬а else:
┬а ┬а ┬а ┬а return "тЪк SMA рж╕рж┐ржЧржирзНржпрж╛рж▓ ржирзЗржЗ"

def macd_histogram_signal(macd, signal):
┬а ┬а histogram = macd - signal
┬а ┬а if histogram.iloc[-1] > 0 and histogram.iloc[-2] <= 0:
┬а ┬а ┬а ┬а return "ЁЯЯв MACD рж╣рж┐рж╖рзНржЯрзЛржЧрзНрж░рж╛ржо ржЗрждрж┐ржмрж╛ржЪржХ ржкрзНрж░ржмржгрждрж╛ рж╢рзБрж░рзБ ржХрж░рзЗржЫрзЗред"
┬а ┬а elif histogram.iloc[-1] < 0 and histogram.iloc[-2] >= 0:
┬а ┬а ┬а ┬а return "ЁЯФ┤ MACD рж╣рж┐рж╖рзНржЯрзЛржЧрзНрж░рж╛ржо ржирзЗрждрж┐ржмрж╛ржЪржХ ржкрзНрж░ржмржгрждрж╛ рж╢рзБрж░рзБ ржХрж░рзЗржЫрзЗред"
┬а ┬а else:
┬а ┬а ┬а ┬а return "тЪк MACD рж╣рж┐рж╖рзНржЯрзЛржЧрзНрж░рж╛ржо рж╕рзНржерж┐рждрж┐рж╢рзАрж▓ред"

def candlestick_volume_ai(df):
┬а ┬а last_pattern = df['pattern'].dropna().iloc[-1] if df['pattern'].dropna().any() else None
┬а ┬а last_vol_spike = df['volume_spike'].iloc[-1]

┬а ┬а confidence = 0
┬а ┬а messages = []

┬а ┬а if last_pattern == "Bullish Engulfing":
┬а ┬а ┬а ┬а confidence += 3
┬а ┬а ┬а ┬а messages.append("ЁЯХпя╕П Bullish Engulfing ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ, ржпрж╛ ржжрж╛ржо ржмрж╛рзЬрж╛рж░ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржЗржЩрзНржЧрж┐рждред")
┬а ┬а elif last_pattern == "Bearish Engulfing":
┬а ┬а ┬а ┬а confidence -= 3
┬а ┬а ┬а ┬а messages.append("ЁЯХпя╕П Bearish Engulfing ржкрзНржпрж╛ржЯрж╛рж░рзНржи, ржжрж╛ржо ржХржорж╛рж░ рж╕ржорзНржнрж╛ржмржирж╛ ржЖржЫрзЗред")
┬а ┬а elif last_pattern == "Hammer":
┬а ┬а ┬а ┬а confidence += 2
┬а ┬а ┬а ┬а messages.append("ЁЯХпя╕П Hammer ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржжрж╛ржо ржкрзБржирж░рзБржжрзНржзрж╛рж░рзЗрж░ рж╕ржорзНржнрж╛ржмржирж╛ ржжрзЗржЦрж╛рзЯред")
┬а ┬а elif last_pattern == "Shooting Star":
┬а ┬а ┬а ┬а confidence -= 2
┬а ┬а ┬а ┬а messages.append("ЁЯХпя╕П Shooting Star ржкрзНржпрж╛ржЯрж╛рж░рзНржи рж╕рждрж░рзНржХрждрж╛, ржжрж╛ржо ржХржорждрзЗ ржкрж╛рж░рзЗред")
┬а ┬а elif last_pattern == "Doji":
┬а ┬а ┬а ┬а confidence += 0
┬а ┬а ┬а ┬а messages.append("ЁЯХпя╕П Doji ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржорж╛рж░рзНржХрзЗржЯрзЗ ржЕржирж┐рж╢рзНржЪрзЯрждрж╛ ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗред")
┬а ┬а else:
┬а ┬а ┬а ┬а messages.append("ЁЯХпя╕П ржХрзЛржи рж╕рзНржкрж╖рзНржЯ ржХрзНржпрж╛ржирзНржбрзЗрж▓рж╕рзНржЯрж┐ржХ ржкрзНржпрж╛ржЯрж╛рж░рзНржи ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")

┬а ┬а if last_vol_spike:
┬а ┬а ┬а ┬а confidence += 3
┬а ┬а ┬а ┬а messages.append("ЁЯУИ ржнрж▓рж┐ржЙржо рж╕рзНржкрж╛ржЗржХ ржжрзЗржЦрж╛ ржЧрзЗржЫрзЗ, ржмржбрж╝ ржЗржиржнрзЗрж╕рзНржЯрж░ (рж╣рзБржЗрж▓) ржкрзНрж░ржмрзЗрж╢ ржХрж░ржЫрзЗред")
┬а ┬а else:
┬а ┬а ┬а ┬а messages.append("ЁЯУЙ ржнрж▓рж┐ржЙржо рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ рж░рзЯрзЗржЫрзЗред")

┬а ┬а if confidence >= 4:
┬а ┬а ┬а ┬а strategy = "ЁЯЯв рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржмрж╛рзЯ ржЯрзНрж░рзЗржирзНржб, ржПржЦржи ржХрзЗржирж╛ржХрж╛ржЯрж╛ ржХрж░рж╛рж░ ржнрж╛рж▓рзЛ рж╕ржорзЯред"
┬а ┬а elif 1 <= confidence < 4:
┬а ┬а ┬а ┬а strategy = "ЁЯЯб рж╕ржорзНржнрж╛ржмржирж╛ржорзЯ ржкрж░рж┐рж╕рзНржерж┐рждрж┐, рж╕рждрж░рзНржХрждрж╛рж░ рж╕рж╛ржерзЗ ржЯрзНрж░рзЗржб ржХрж░рзБржиред"
┬а ┬а elif -3 <= confidence < 1:
┬а ┬а ┬а ┬а strategy = "ЁЯЯа ржЕржирж┐рж╢рзНржЪрж┐ржд ржорж╛рж░рзНржХрзЗржЯ, ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рж╛ржЗ ржнрж╛рж▓рзЛред"
┬а ┬а else:
┬а ┬а ┬а ┬а strategy = "ЁЯФ┤ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржмрж┐рзЯрж╛рж░ ржЯрзНрж░рзЗржирзНржб, ржмрж┐ржХрзНрж░рж┐ ржмрж╛ ржжрзВрж░рзЗ ржерж╛ржХрж╛ ржнрж╛рж▓ред"

┬а ┬а full_message = "\n".join(messages) + f"\n\nЁЯУК Confidence Score: {confidence}\n\n**рж╕рзНржЯрзНрж░рзНржпрж╛ржЯрзЗржЬрж┐:** {strategy}"
┬а ┬а return full_message

def volume_spike_summary(spike):
┬а ┬а return "ЁЯУИ рж╣рзБржЗрж▓ ржЯрзНрж░рзЗржбрж╛рж░ ржврзБржХржЫрзЗ, рж╕рждрж░рзНржХржнрж╛ржмрзЗ Buy ржПржиржЯрзНрж░рж┐ ржмрж┐ржмрзЗржЪржирж╛ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗред" if spike else "ЁЯУЙ ржнрж▓рж┐ржЙржо рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ, рж╣рзБржЗрж▓ рж╕ржХрзНрж░рж┐рзЯ ржирзЯред"

def risk_signal(entry_price, current_price, sl_pct=5, tp_pct=10):
┬а ┬а sl = entry_price * (1 - sl_pct / 100)
┬а ┬а tp = entry_price * (1 + tp_pct / 100)
┬а ┬а msg = f"ЁЯОп ржПржирзНржЯрзНрж░рж┐: ${entry_price:.6f} тЖТ ЁЯОп SL: ${sl:.6f}, ЁЯПЖ TP: ${tp:.6f}"
┬а ┬а if current_price <= sl:
┬а ┬а ┬а ┬а msg += "\nЁЯФ┤ рж╕рзНржЯржк рж▓рж╕ рж╣рж┐ржЯ ржХрж░рзЗржЫрзЗ, ржХрзНрж╖рждрж┐ ржХржорж╛рждрзЗ рж╕рзЗрж▓ ржХрж░рзБржиред"
┬а ┬а elif current_price >= tp:
┬а ┬а ┬а ┬а msg += "\nЁЯЯв ржкрзНрж░ржлрж┐ржЯ ржЯрж╛рж░рзНржЧрзЗржЯ рж╣рж┐ржЯ, ржкрзНрж░ржлрж┐ржЯ ржмрзБржХ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗред"
┬а ┬а else:
┬а ┬а ┬а ┬а msg += "\nтП│ ржорж╛рж░рзНржХрзЗржЯ ржПржЦржиржУ рж▓ржХрзНрж╖рзНржпржорж╛рждрзНрж░рж╛рзЯ ржкрзМржБржЫрж╛рзЯржирж┐ред"
┬а ┬а return msg
        
